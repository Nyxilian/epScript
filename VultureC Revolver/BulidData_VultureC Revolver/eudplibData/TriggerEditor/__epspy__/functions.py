## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 3) const playerEPD = PVariable();
playerEPD = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 4) const playerRevolverGauge = PVariable();
playerRevolverGauge = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 6) const s = StringBuffer(1024);
s = _CGFW(lambda: [StringBuffer(1024)], 1)[0]
# (Line 8) function SetNextUnitPTR(){
@EUDFunc
def SetNextUnitPTR():
    # (Line 9) return dwread_epd(EPD(0x628438));
    EUDReturn(f_dwread_epd(EPD(0x628438)))
    # (Line 10) }
    # (Line 12) function SetNextUnitEPD(){

@EUDFunc
def SetNextUnitEPD():
    # (Line 13) return epdread_epd(EPD(0x628438));
    EUDReturn(f_epdread_epd(EPD(0x628438)))
    # (Line 14) }
    # (Line 16) function SetNextUnitPtrEpd(){

@EUDFunc
def SetNextUnitPtrEpd():
    # (Line 17) return cunitepdread_epd(EPD(0x628438));
    EUDReturn(f_cunitepdread_epd(EPD(0x628438)))
    # (Line 18) }
    # (Line 20) function playerRev() {

@EUDFunc
def f_playerRev():
    # (Line 21) foreach(cp : EUDLoopPlayer("Human")) {
    for cp in EUDLoopPlayer("Human"):
        # (Line 22) setcurpl(cp);
        f_setcurpl(cp)
        # (Line 23) playerEPD[cp] = SetNextUnitEPD();
        _ARRW(playerEPD, cp) << (SetNextUnitEPD())
        # (Line 24) CreateUnit(1, 19, "PlayerRevive", cp);
        # (Line 25) }
        DoActions(CreateUnit(1, 19, "PlayerRevive", cp))
        # (Line 26) }

    # (Line 28) const playerMove = PVariable();

playerMove = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 29) const playerHold = PVariable();
playerHold = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 31) function variableInit() {
@EUDFunc
def f_variableInit():
    # (Line 32) foreach(cp : EUDLoopPlayer("Human")) {
    for cp in EUDLoopPlayer("Human"):
        # (Line 33) setcurpl(cp);
        f_setcurpl(cp)
        # (Line 34) playerMove[cp] = 1;
        _ARRW(playerMove, cp) << (1)
        # (Line 35) }
        # (Line 36) }

    # (Line 38) function detectHold() {

@EUDFunc
def f_detectHold():
    # (Line 39) foreach(cp : EUDLoopPlayer("Human")) {
    for cp in EUDLoopPlayer("Human"):
        # (Line 40) setcurpl(cp);
        f_setcurpl(cp)
        # (Line 41) if(playerHold[cp] == 0 && playerMove[cp] == 1 && MemoryXEPD(playerEPD[cp] + 0x4D/4, Exactly, 107, 1) && playerRevolverGauge[cp] < 6) {
        if EUDIf()(EUDSCAnd()(playerHold[cp] == 0)(playerMove[cp] == 1)(MemoryXEPD(playerEPD[cp] + 0x4D // 4, Exactly, 107, 1))(playerRevolverGauge[cp] >= 6, neg=True)()):
            # (Line 42) playerHold[cp] = 1;
            _ARRW(playerHold, cp) << (1)
            # (Line 43) playerMove[cp] = 0;
            _ARRW(playerMove, cp) << (0)
            # (Line 44) playerRevolverGauge[cp]++;
            _ARRW(playerRevolverGauge, cp).__iadd__(1)
            # (Line 45) }
            # (Line 46) if(playerHold[cp] == 1 && playerMove[cp] == 0 && MemoryXEPD(playerEPD[cp] + 0x4D/4, Exactly, 6, 1)) {
        EUDEndIf()
        if EUDIf()(EUDSCAnd()(playerHold[cp] == 1)(playerMove[cp] == 0)(MemoryXEPD(playerEPD[cp] + 0x4D // 4, Exactly, 6, 1))()):
            # (Line 47) playerMove[cp] = 1;
            _ARRW(playerMove, cp) << (1)
            # (Line 48) playerHold[cp] = 0;
            _ARRW(playerHold, cp) << (0)
            # (Line 49) }
            # (Line 50) s.printAt(0, playerHold[cp]);
        EUDEndIf()
        s.printAt(0, playerHold[cp])
        # (Line 51) s.printAt(1, playerMove[cp]);
        s.printAt(1, playerMove[cp])
        # (Line 52) eprintln("\x04현재 리볼버 게이지 : ", playerRevolverGauge[cp], " / 6");
        f_eprintln("\x04현재 리볼버 게이지 : ", playerRevolverGauge[cp], " / 6")
        # (Line 53) }
        # (Line 54) }
