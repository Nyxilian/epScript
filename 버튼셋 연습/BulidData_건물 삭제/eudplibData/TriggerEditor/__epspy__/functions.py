## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import TriggerEditor.TETools as fx;
from TriggerEditor import TETools as fx
# (Line 2) import unitlooper as ul;
import unitlooper as ul
# (Line 4) var unitEPD;
unitEPD = EUDVariable()
# (Line 6) function SetNextUnitPTR(){
@EUDFunc
def SetNextUnitPTR():
    # (Line 7) return dwread_epd(EPD(0x628438));
    EUDReturn(f_dwread_epd(EPD(0x628438)))
    # (Line 8) }
    # (Line 10) function SetNextUnitEPD(){

@EUDFunc
def SetNextUnitEPD():
    # (Line 11) return epdread_epd(EPD(0x628438));
    EUDReturn(f_epdread_epd(EPD(0x628438)))
    # (Line 12) }
    # (Line 14) function SetNextUnitPtrEpd(){

@EUDFunc
def SetNextUnitPtrEpd():
    # (Line 15) return cunitepdread_epd(EPD(0x628438));
    EUDReturn(f_cunitepdread_epd(EPD(0x628438)))
    # (Line 16) }
    # (Line 18) function buttonSet() {

@EUDFunc
def f_buttonSet():
    # (Line 19) foreach(cp : EUDLoopPlayer("Human")) {
    for cp in EUDLoopPlayer("Human"):
        # (Line 20) setcurpl(cp);
        f_setcurpl(cp)
        # (Line 21) if(Command(cp, Exactly, 0, 16)) {
        if EUDIf()(Command(cp, Exactly, 0, 16)):
            # (Line 22) unitEPD = SetNextUnitEPD();
            unitEPD << (SetNextUnitEPD())
            # (Line 23) CreateUnit(1, 16, "Start", cp);
            # (Line 24) }
            DoActions(CreateUnit(1, 16, "Start", cp))
            # (Line 25) if(Command(cp, AtLeast, 1, 16) && fx.BuildCheckEPD(unitEPD, 9)) {
        EUDEndIf()
        if EUDIf()(EUDSCAnd()(Command(cp, AtLeast, 1, 16))(fx.BuildCheckEPD(unitEPD, 9))()):
            # (Line 26) fx.BuildResetEPD(unitEPD);
            fx.BuildResetEPD(unitEPD)
            # (Line 27) MoveLocation("Target", 16, cp, "Anywhere");
            # (Line 28) GiveUnits(All, "(buildings)", 7, "Target", 6);
            DoActions(MoveLocation("Target", 16, cp, "Anywhere"))
            # (Line 29) foreach(ptr, epd : ul.LoopPUnit(6)) {
            DoActions(GiveUnits(All, "(buildings)", 7, "Target", 6))
            for ptr, epd in ul.LoopPUnit(6):
                # (Line 30) const unitID = wread_epd(epd + 0x64/4, 0);
                unitID = f_wread_epd(epd + 0x64 // 4, 0)
                # (Line 31) const unitOre = wread(0x65FD00 + 15240 + unitID * 2);
                unitOre = f_wread(0x65FD00 + 15240 + unitID * 2)
                # (Line 32) const unitGas = wread(0x65FD00 + 0 + unitID * 2);
                unitGas = f_wread(0x65FD00 + 0 + unitID * 2)
                # (Line 33) SetResources(cp, Add, unitOre, Ore);
                # (Line 34) SetResources(cp, Add, unitGas, Gas);
                DoActions(SetResources(cp, Add, unitOre, Ore))
                # (Line 35) }
                DoActions(SetResources(cp, Add, unitGas, Gas))
                # (Line 36) KillUnitAt(All, "(buildings)", "Target", 6);

            # (Line 37) }
            DoActions(KillUnitAt(All, "(buildings)", "Target", 6))
            # (Line 38) }
        EUDEndIf()
        # (Line 39) }
