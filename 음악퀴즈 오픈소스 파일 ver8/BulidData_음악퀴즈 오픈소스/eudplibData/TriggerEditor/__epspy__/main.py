## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import opening as op;
import opening as op
# (Line 3) import musicPlay as mp;
import musicPlay as mp
# (Line 4) import bgmplay as bp;
import bgmplay as bp
# (Line 5) import MusicSetting as ms;
import MusicSetting as ms
# (Line 6) import System as sys;
import System as sys
# (Line 7) import TriggerEditor.BGMPlayer as BGM;
from TriggerEditor import BGMPlayer as BGM
# (Line 8) import functions as fc;
import functions as fc
# (Line 10) const s = StringBuffer(1024);
s = _CGFW(lambda: [StringBuffer(1024)], 1)[0]
# (Line 13) function onPluginStart(){
@EUDFunc
def onPluginStart():
    # (Line 15) randomize();
    f_randomize()
    # (Line 16) BGM.loadSound();
    BGM.f_loadSound()
    # (Line 17) fc.SingleBan();
    fc.SingleBan()
    # (Line 18) fc.SpeedBan();
    fc.SpeedBan()
    # (Line 19) fc.mouseInit();
    fc.f_mouseInit()
    # (Line 20) fc.checkDebug();
    fc.f_checkDebug()
    # (Line 21) SetMemoryEPD(EPD(0x657A9C), SetTo, 0); //화면밝기
    # (Line 22) EUDPlayerLoop()();
    DoActions(SetMemoryEPD(EPD(0x657A9C), SetTo, 0))
    EUDPlayerLoop()()
    # (Line 23) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 24) if(cp<7){
    if EUDIf()(cp >= 7, neg=True):
        # (Line 25) CreateUnit(1, 215, sys.orderLoc+cp, cp);
        # (Line 26) fc.PlayerInit();
        DoActions(CreateUnit(1, 215, sys.orderLoc + cp, cp))
        fc.PlayerInit()
        # (Line 27) }
        # (Line 28) EUDEndPlayerLoop();
    EUDEndIf()
    EUDEndPlayerLoop()
    # (Line 30) }
    # (Line 32) function beforeTriggerExec(){

@EUDFunc
def beforeTriggerExec():
    # (Line 34) SetMemory(0x6509A0, SetTo, 0); //EUD터보
    # (Line 35) SetMemory(0x5124F0, SetTo, 29);	//x2배속
    DoActions(SetMemory(0x6509A0, SetTo, 0))
    # (Line 36) RemoveUnit(215, P12);
    DoActions(SetMemory(0x5124F0, SetTo, 29))
    # (Line 37) sys.OrderSys();
    DoActions(RemoveUnit(215, P12))
    sys.OrderSys()
    # (Line 38) mp.musicSystem();
    mp.f_musicSystem()
    # (Line 39) fc.playerKick();
    fc.f_playerKick()
    # (Line 40) }
    # (Line 42) function afterTriggerExec(){

@EUDFunc
def afterTriggerExec():
    # (Line 44) EUDPlayerLoop()();
    EUDPlayerLoop()()
    # (Line 45) const cp = getcurpl();
    cp = f_getcurpl()
    # (Line 46) if(cp<7){
    if EUDIf()(cp >= 7, neg=True):
        # (Line 47) bp.bgmFunc(cp);
        bp.f_bgmFunc(cp)
        # (Line 48) if(op.opening[cp] < 9999){op.OpeningText(cp);} //오프닝
        if EUDIf()(op.opening[cp] >= 9999, neg=True):
            op.OpeningText(cp)
            # (Line 49) mp.musicPlay(cp); //게임 진행
        EUDEndIf()
        mp.f_musicPlay(cp)
        # (Line 50) ms.EffectSound(cp); //효과음 사운드 처리
        ms.EffectSound(cp)
        # (Line 51) }
        # (Line 52) EUDEndPlayerLoop();
    EUDEndIf()
    EUDEndPlayerLoop()
    # (Line 53) }
