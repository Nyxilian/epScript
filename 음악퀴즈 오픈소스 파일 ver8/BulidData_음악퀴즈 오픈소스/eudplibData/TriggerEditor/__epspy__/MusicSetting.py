## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import functions as fc;
import functions as fc
# (Line 5) const MusicShort	= 1;		//1로 설정하면, 방장 설정 옵션에서 짧게듣기 옵션이 활성화 됩니다. (0으로 하면 비활성화!)
MusicShort = _CGFW(lambda: [1], 1)[0]
# (Line 6) const ShortTimer	= 20;	//짧게 듣는 시간을 정합니다. MusicStart 값보다 커야 합니다.
ShortTimer = _CGFW(lambda: [20], 1)[0]
# (Line 8) const MusicShuffle	= 1;		//0 또는 1로 작성, 음악을 섞고 싶으면 1, 섞고 싶지 않으면 0으로 해주세요.
MusicShuffle = _CGFW(lambda: [1], 1)[0]
# (Line 9) const MusicNumber	= 4;		//음악갯수 필히 수정 (만약 엔딩곡도 넣었다면, 엔딩곡 또한 제외한 곡수입니다. MusicNumber = 문제음악 수;)
MusicNumber = _CGFW(lambda: [4], 1)[0]
# (Line 10) const MusicStart		= 20;	//음악 시작후 20초 남았을 때 공개되는 힌트
MusicStart = _CGFW(lambda: [20], 1)[0]
# (Line 11) const MusicEnd		= 10;	//음악 시작후 10초 남았을 때 공개되는 힌트
MusicEnd = _CGFW(lambda: [10], 1)[0]
# (Line 12) const VoteNum		= [1, 2, 3, 4, 5, 6, 7]; //각 정원별 투표인원 (1명일 때 1명, 2명일 때 2명, 3명일 때 3명 ...)
VoteNum = _CGFW(lambda: [_ARR(FlattenList([1, 2, 3, 4, 5, 6, 7]))], 1)[0]
# (Line 15) const MusicSelect	= 1;		//1로 설정하면, 게임시작시 오프닝에서 재생할 곡수를 선택할 수 있게 됩니다. (0으로 하면 비활성화!)
MusicSelect = _CGFW(lambda: [1], 1)[0]
# (Line 16) const musicNum1	= 1;
musicNum1 = _CGFW(lambda: [1], 1)[0]
# (Line 17) const musicNum2	= 2;
musicNum2 = _CGFW(lambda: [2], 1)[0]
# (Line 18) const musicNum3	= 3;
musicNum3 = _CGFW(lambda: [3], 1)[0]
# (Line 19) const musicNum4	= MusicNumber;
musicNum4 = _CGFW(lambda: [MusicNumber], 1)[0]
# (Line 25) const EndingMusic	= 5;		//엔딩때 재생하고자 하는 음악의 인덱스값을 입력해주세요. (0인트로 1첫번째곡, 2두번째곡, ...)
EndingMusic = _CGFW(lambda: [5], 1)[0]
# (Line 26) const EndingTimer	= 180;	//엔딩 시간 설정 (단위 초)
EndingTimer = _CGFW(lambda: [180], 1)[0]
# (Line 28) const MusicHint1 = [
# (Line 29) Db("외국영화"), Db("애니OST"), Db("게임OST"), Db("영국드라마")
# (Line 30) ];
MusicHint1 = _CGFW(lambda: [_ARR(FlattenList([Db("외국영화"), Db("애니OST"), Db("게임OST"), Db("영국드라마")]))], 1)[0]
# (Line 31) const MusicHint2 = [
# (Line 32) Db("ㅅㅍㅇㄷㅁ"), Db("ㅇㄴㅇㅅ"),  Db("ㅁㅂㄴㄱ"), Db("ㅅㄹ")
# (Line 33) ];
MusicHint2 = _CGFW(lambda: [_ARR(FlattenList([Db("ㅅㅍㅇㄷㅁ"), Db("ㅇㄴㅇㅅ"), Db("ㅁㅂㄴㄱ"), Db("ㅅㄹ")]))], 1)[0]
# (Line 34) const MusicLength = [
# (Line 35) 40, 50, 40, 50
# (Line 36) ];
MusicLength = _CGFW(lambda: [_ARR(FlattenList([40, 50, 40, 50]))], 1)[0]
# (Line 37) const MusicAnswer = [
# (Line 38) Db("스파이더맨:파프롬홈 OST - Mysterio Theme"),  Db("이누야샤 OST - 달묘전설"), Db("마비노기 OST - 어릴적 할머니가 들려주신 옛전설"), Db("셜록 OST - Opening Titles"),
# (Line 39) ];
MusicAnswer = _CGFW(lambda: [_ARR(FlattenList([Db("스파이더맨:파프롬홈 OST - Mysterio Theme"), Db("이누야샤 OST - 달묘전설"), Db("마비노기 OST - 어릴적 할머니가 들려주신 옛전설"), Db("셜록 OST - Opening Titles")]))], 1)[0]
# (Line 43) const KEY	   = $U("Kyadarin Crystal Formation");
KEY = _CGFW(lambda: [EncodeUnit("Kyadarin Crystal Formation")], 1)[0]
# (Line 44) const ANSWER	= $U("Jump Gate");
ANSWER = _CGFW(lambda: [EncodeUnit("Jump Gate")], 1)[0]
# (Line 45) const MUSIC	 = $U("Cantina");
MUSIC = _CGFW(lambda: [EncodeUnit("Cantina")], 1)[0]
# (Line 46) const MOUSE	 = $U("Cave-in");
MOUSE = _CGFW(lambda: [EncodeUnit("Cave-in")], 1)[0]
# (Line 47) const EFFECT	= $U("Cave");
EFFECT = _CGFW(lambda: [EncodeUnit("Cave")], 1)[0]
# (Line 50) const EndingText1 = Db("\x13\x19┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓"); //상단 첫번째줄
EndingText1 = _CGFW(lambda: [Db("\x13\x19┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓")], 1)[0]
# (Line 51) const EndingText2 = Db("\x13"); //두번째줄
EndingText2 = _CGFW(lambda: [Db("\x13")], 1)[0]
# (Line 52) const EndingText3 = Db("\x13\x04엔딩 부분입니다."); //세번째줄
EndingText3 = _CGFW(lambda: [Db("\x13\x04엔딩 부분입니다.")], 1)[0]
# (Line 53) const EndingText4 = Db("\x13\x1E엔딩곡은 오픈소스 기준, 블랙팬서 OST 입니다."); //네번째줄
EndingText4 = _CGFW(lambda: [Db("\x13\x1E엔딩곡은 오픈소스 기준, 블랙팬서 OST 입니다.")], 1)[0]
# (Line 54) const EndingText5 = Db("\x13\x1D오픈소스제작자 \x04: Avlos(갈대)"); //다섯번째줄
EndingText5 = _CGFW(lambda: [Db("\x13\x1D오픈소스제작자 \x04: Avlos(갈대)")], 1)[0]
# (Line 55) const EndingText6 = Db("\x13"); //여섯번째줄
EndingText6 = _CGFW(lambda: [Db("\x13")], 1)[0]
# (Line 56) const EndingText7 = Db("\x13\x19┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛"); //일곱번째줄
EndingText7 = _CGFW(lambda: [Db("\x13\x19┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛")], 1)[0]
# (Line 58) function LeaderBoardTrigger(){  //리더보드 표시는 여기서 수정하세요.
@EUDFunc
def LeaderBoardTrigger():
    # (Line 59) LeaderBoardScore(Custom, "\x1E고인물"); //리더보드
    # (Line 60) LeaderBoardComputerPlayers(Disable); //컴퓨터 리더보드 Disable
    DoActions(LeaderBoardScore(Custom, "\x1E고인물"))
    # (Line 61) }
    DoActions(LeaderBoardComputerPlayers(Disable))
    # (Line 63) function EffectSound(cp){

@EUDFunc
def EffectSound(cp):
    # (Line 64) if(Deaths(cp, AtLeast, 1, EFFECT)){
    if EUDIf()(Deaths(cp, AtLeast, 1, EFFECT)):
        # (Line 65) const value = fc.GetDeath(cp, EFFECT);
        value = fc.GetDeath(cp, EFFECT)
        # (Line 66) SetDeaths(cp, SetTo, 0, EFFECT);
        # (Line 67) if(value == 1){PlayWAV("staredit\\wav\\g_8.ogg");}
        DoActions(SetDeaths(cp, SetTo, 0, EFFECT))
        if EUDIf()(value == 1):
            DoActions(PlayWAV("staredit\\wav\\g_8.ogg"))
            # (Line 68) else if(value == 2){PlayWAV("staredit\\wav\\0115.WAV");}
        if EUDElseIf()(value == 2):
            DoActions(PlayWAV("staredit\\wav\\0115.WAV"))
            # (Line 69) else if(value == 3){PlayWAV("staredit\\wav\\questnew2.wav");}
        if EUDElseIf()(value == 3):
            DoActions(PlayWAV("staredit\\wav\\questnew2.wav"))
            # (Line 70) else if(value == 4){PlayWAV("staredit\\wav\\Clear.wav");}
        if EUDElseIf()(value == 4):
            DoActions(PlayWAV("staredit\\wav\\Clear.wav"))
            # (Line 71) else if(value == 5){PlayWAV("staredit\\wav\\DiceItemStarFall_Swing.wav");}
        if EUDElseIf()(value == 5):
            DoActions(PlayWAV("staredit\\wav\\DiceItemStarFall_Swing.wav"))
            # (Line 72) }   //효과음을 재생시키는 함수입니다. scm draft2에서 Sound Editor를 통해 사운드를 넣었다면,
        EUDEndIf()
        # (Line 73) }	   //"staredit\\wav\\사운드이름.확장자"형식으로 수정해주시면 됩니다.
    EUDEndIf()
