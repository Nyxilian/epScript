## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import MusicSetting as ms;
import MusicSetting as ms
# (Line 3) import musicPlay as mp;
import musicPlay as mp
# (Line 5) const s = StringBuffer(1024);
s = _CGFW(lambda: [StringBuffer(1024)], 1)[0]
# (Line 6) const mouseLoc = $L("P1");
mouseLoc = _CGFW(lambda: [GetLocationIndex("P1")], 1)[0]
# (Line 7) const mX = PVariable();
mX = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 8) const mY = PVariable();
mY = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 9) var MouseUse = 0;
MouseUse = EUDCreateVariables(1)
_IGVA([MouseUse], lambda: [0])
# (Line 10) var superUser = 0;
superUser = EUDCreateVariables(1)
_IGVA([superUser], lambda: [0])
# (Line 12) function SingleBan(){
@EUDFunc
def SingleBan():
    # (Line 13) const a = 0x6D0F48; //방이름
    a = 0x6D0F48
    # (Line 14) const b = 0x6D0F78; //방장닉
    b = 0x6D0F78
    # (Line 15) const c = Db("");
    c = Db("")
    # (Line 16) if(strcmp(a, b) == 0){
    if EUDIf()(f_strcmp(a, b) == 0):
        # (Line 17) foreach(cp : EUDLoopPlayer('Human', None, None)){
        for cp in EUDLoopPlayer('Human', None, None):
            # (Line 18) setcurpl(cp);
            f_setcurpl(cp)
            # (Line 19) s.print("\x13\x1EUDP 플레이는 금지하고 있습니다.\n\x13\x04만약 방제가 방장닉네임일 경우 플레이가 불가능하니 다른 방제로 설정해주세요.");
            s.print("\x13\x1EUDP 플레이는 금지하고 있습니다.\n\x13\x04만약 방제가 방장닉네임일 경우 플레이가 불가능하니 다른 방제로 설정해주세요.")
            # (Line 20) Defeat();
            # (Line 21) }
            DoActions(Defeat())
            # (Line 22) }

        # (Line 23) else if(strcmp(b, c) == 0){
    if EUDElseIf()(f_strcmp(b, c) == 0):
        # (Line 24) foreach(cp : EUDLoopPlayer('Human', None, None)){
        for cp in EUDLoopPlayer('Human', None, None):
            # (Line 25) setcurpl(cp);
            f_setcurpl(cp)
            # (Line 26) s.print("\x13\x1E싱글 플레이는 금지하고 있습니다.");
            s.print("\x13\x1E싱글 플레이는 금지하고 있습니다.")
            # (Line 27) Defeat();
            # (Line 28) }
            DoActions(Defeat())
            # (Line 29) }

        # (Line 30) for(var i=0; i<7; i++){
    EUDEndIf()
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 7, neg=True):
        def _t4():
            i.__iadd__(1)
        # (Line 31) const d = 0x57EEEB + 36 * i;
        d = 0x57EEEB + 36 * i
        # (Line 32) if(strcmp(b, d) == 0){superUser = i; break;}
        if EUDIf()(f_strcmp(b, d) == 0):
            superUser << (i)
            EUDBreak()
            # (Line 33) }
        EUDEndIf()
        # (Line 34) }
        EUDSetContinuePoint()
        _t4()
    EUDEndWhile()
    # (Line 36) function SpeedBan(){

@EUDFunc
def SpeedBan():
    # (Line 37) const a = dwread_epd_safe(EPD(0x51CE84));
    a = f_dwread_epd_safe(EPD(0x51CE84))
    # (Line 38) const b = dwread_epd_safe(EPD(0x51CE88));
    b = f_dwread_epd_safe(EPD(0x51CE88))
    # (Line 39) if(a == 1000){if(b == 1000) return;}		//턴레이트24
    if EUDIf()(a == 1000):
        if EUDIf()(b == 1000):
            EUDReturn()
        EUDEndIf()
        # (Line 40) else if(a == 1042){if(b == 1190) return;}	//턴레이트20
    if EUDElseIf()(a == 1042):
        if EUDIf()(b == 1190):
            EUDReturn()
        EUDEndIf()
        # (Line 41) else if(a == 1302){if(b == 1488) return;}	//턴레이트16
    if EUDElseIf()(a == 1302):
        if EUDIf()(b == 1488):
            EUDReturn()
        EUDEndIf()
        # (Line 42) else if(a == 1488){if(b == 1701) return;}	//턴레이트14
    if EUDElseIf()(a == 1488):
        if EUDIf()(b == 1701):
            EUDReturn()
        EUDEndIf()
        # (Line 43) else if(a == 1736){if(b == 1984) return;}	//턴레이트12
    if EUDElseIf()(a == 1736):
        if EUDIf()(b == 1984):
            EUDReturn()
        EUDEndIf()
        # (Line 44) else if(a == 2083){if(b == 2381) return;}	//턴레이트10
    if EUDElseIf()(a == 2083):
        if EUDIf()(b == 2381):
            EUDReturn()
        EUDEndIf()
        # (Line 45) else if(a == 2604){if(b == 2976) return;}	//턴레이트8
    if EUDElseIf()(a == 2604):
        if EUDIf()(b == 2976):
            EUDReturn()
        EUDEndIf()
        # (Line 46) else{
    if EUDElse()():
        # (Line 47) foreach(cp : EUDLoopPlayer('Human', None, None)){
        for cp in EUDLoopPlayer('Human', None, None):
            # (Line 48) setcurpl(cp);
            f_setcurpl(cp)
            # (Line 49) s.print("\x13\x1E배속 플레이는 금지하고 있습니다.");
            s.print("\x13\x1E배속 플레이는 금지하고 있습니다.")
            # (Line 50) Defeat();
            # (Line 51) }
            DoActions(Defeat())
            # (Line 52) }

        # (Line 53) }
    EUDEndIf()
    # (Line 55) function playerKick(){

@EUDFunc
def f_playerKick():
    # (Line 56) for(var i=0; i<7; i++){
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 7, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 57) const j = i+1000;
        j = i + 1000
        # (Line 58) if(Deaths(superUser, Exactly, j, ms.ANSWER)){
        if EUDIf()(Deaths(superUser, Exactly, j, ms.ANSWER)):
            # (Line 59) if(Command(i, Exactly, 1, 215)){
            if EUDIf()(Command(i, Exactly, 1, 215)):
                # (Line 60) if(superUser != i){
                if EUDIf()(superUser == i, neg=True):
                    # (Line 61) foreach(p : EUDLoopPlayer('Human', None, None)){
                    for p in EUDLoopPlayer('Human', None, None):
                        # (Line 62) setcurpl(p); s.print("\x1F■ ", PColor(superUser), PName(superUser),"\x04님께서 ", PColor(i), PName(i), "\x04님을 강퇴하셨습니다.");
                        f_setcurpl(p)
                        s.print("\x1F■ ", PColor(superUser), PName(superUser), "\x04님께서 ", PColor(i), PName(i), "\x04님을 강퇴하셨습니다.")
                        # (Line 63) SetDeaths(p, SetTo, 4, ms.EFFECT);
                        # (Line 64) }
                        DoActions(SetDeaths(p, SetTo, 4, ms.EFFECT))
                        # (Line 65) setcurpl(i); s.print("\x08■ \x04강퇴당하셨습니다."); Defeat();

                    f_setcurpl(i)
                    s.print("\x08■ \x04강퇴당하셨습니다.")
                    # (Line 66) }
                    DoActions(Defeat())
                    # (Line 67) }
                EUDEndIf()
                # (Line 68) }
            EUDEndIf()
            # (Line 69) }
        EUDEndIf()
        # (Line 70) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 72) function mouseInit(){

@EUDFunc
def f_mouseInit():
    # (Line 73) EUDRegisterObjectToNamespace("Mo", MouseUse);
    EUDRegisterObjectToNamespace("Mo", MouseUse)
    # (Line 74) }
    # (Line 76) function mouseSwitch(a){

@EUDFunc
def f_mouseSwitch(a):
    # (Line 77) MouseUse = a;
    MouseUse << (a)
    # (Line 78) }
    # (Line 80) function mouseTrack(cp){

@EUDFunc
def f_mouseTrack(cp):
    # (Line 81) const a = EPD(0x58DC4C) + (mouseLoc+cp)*5;
    a = EPD(0x58DC4C) + (mouseLoc + cp) * 5
    # (Line 82) mX[cp] = dwread_epd(a+0);
    _ARRW(mX, cp) << (f_dwread_epd(a + 0))
    # (Line 83) mY[cp] = dwread_epd(a+1);
    _ARRW(mY, cp) << (f_dwread_epd(a + 1))
    # (Line 84) }
    # (Line 85) function GetDeath(player, unit:TrgUnit) {

@EUDTypedFunc([None, TrgUnit])
def GetDeath(player, unit):
    # (Line 86) return dwread_epd(EPD(0x58A364 + 48 * unit + 4 * player));
    EUDReturn(f_dwread_epd(EPD(0x58A364 + 48 * unit + 4 * player)))
    # (Line 88) }
    # (Line 90) function SetLocation(Location ,x ,y, len) {

@EUDFunc
def SetLocation(Location, x, y, len):
    # (Line 91) const loc = EPD(0x58DC4C) + Location * 5;
    loc = EPD(0x58DC4C) + Location * 5
    # (Line 92) SetMemoryEPD(loc+0, SetTo, x-len);
    # (Line 93) SetMemoryEPD(loc+2, SetTo, x+len);
    DoActions(SetMemoryEPD(loc + 0, SetTo, x - len))
    # (Line 94) SetMemoryEPD(loc+1, SetTo, y-len);
    DoActions(SetMemoryEPD(loc + 2, SetTo, x + len))
    # (Line 95) SetMemoryEPD(loc+3, SetTo, y+len);
    DoActions(SetMemoryEPD(loc + 1, SetTo, y - len))
    # (Line 96) }
    DoActions(SetMemoryEPD(loc + 3, SetTo, y + len))
    # (Line 98) function EUDMoveLocation(Location, X, Y){

@EUDFunc
def EUDMoveLocation(Location, X, Y):
    # (Line 99) const loc = EPD(0x58DC4C) + Location * 5;
    loc = EPD(0x58DC4C) + Location * 5
    # (Line 100) SetMemoryEPD(loc, Add, X);
    # (Line 101) SetMemoryEPD(loc+2, Add, X);
    DoActions(SetMemoryEPD(loc, Add, X))
    # (Line 102) SetMemoryEPD(loc+1, Add, -Y);
    DoActions(SetMemoryEPD(loc + 2, Add, X))
    # (Line 103) SetMemoryEPD(loc+3, Add, -Y);
    DoActions(SetMemoryEPD(loc + 1, Add, -Y))
    # (Line 104) }
    DoActions(SetMemoryEPD(loc + 3, Add, -Y))
    # (Line 106) function PlayerInit(){

@EUDFunc
def PlayerInit():
    # (Line 107) RunAIScript("Turn ON Shared Vision for Player 8");
    # (Line 108) SetAllianceStatus(P8, 1);
    DoActions(RunAIScript("Turn ON Shared Vision for Player 8"))
    # (Line 109) }
    DoActions(SetAllianceStatus(P8, 1))
    # (Line 111) function checkDebug(){

@EUDFunc
def f_checkDebug():
    # (Line 112) const mn = ms.MusicNumber; //음악갯수
    mn = ms.MusicNumber
    # (Line 113) const hint1_len = ms.MusicHint1._arrlen;
    hint1_len = ms.MusicHint1._arrlen
    # (Line 114) const hint2_len = ms.MusicHint2._arrlen;
    hint2_len = ms.MusicHint2._arrlen
    # (Line 115) const ml_len = ms.MusicLength._arrlen;
    ml_len = ms.MusicLength._arrlen
    # (Line 116) const ma_len = ms.MusicAnswer._arrlen;
    ma_len = ms.MusicAnswer._arrlen
    # (Line 117) if(mn == hint1_len && mn == hint2_len && mn == ml_len && mn == ma_len){
    if EUDIf()(EUDSCAnd()(mn == hint1_len)(mn == hint2_len)(mn == ml_len)(mn == ma_len)()):
        # (Line 118) foreach(cp : EUDLoopPlayer("Human")){
        for cp in EUDLoopPlayer("Human"):
            # (Line 119) setcurpl(cp);
            f_setcurpl(cp)
            # (Line 120) eprintln("\x1ESetting Complete");
            f_eprintln("\x1ESetting Complete")
            # (Line 121) }
            # (Line 122) }

        # (Line 123) else{
    if EUDElse()():
        # (Line 124) foreach(cp : EUDLoopPlayer("Human")){
        for cp in EUDLoopPlayer("Human"):
            # (Line 125) setcurpl(cp);
            f_setcurpl(cp)
            # (Line 126) s.printf("\x13\x08！ \x04배열의 길이가 일치하지 않습니다. 곡수와 힌트, 음악길이, 정답의 갯수가 일치하게 수정해주세요.");
            s.printf("\x13\x08！ \x04배열의 길이가 일치하지 않습니다. 곡수와 힌트, 음악길이, 정답의 갯수가 일치하게 수정해주세요.")
            # (Line 127) eprintln("\x1D디버그정보 \x1EMusicNumber:",mn,"개  MusicHint1:",hint1_len,"개  MusicHint2:",hint2_len,"개 MusicLength:",ml_len,"개  MusicAnswer:",ma_len,"개");
            f_eprintln("\x1D디버그정보 \x1EMusicNumber:", mn, "개  MusicHint1:", hint1_len, "개  MusicHint2:", hint2_len, "개 MusicLength:", ml_len, "개  MusicAnswer:", ma_len, "개")
            # (Line 128) Defeat();
            # (Line 129) }
            DoActions(Defeat())
            # (Line 130) }

        # (Line 131) if(ms.MusicShort == 1){
    EUDEndIf()
    if EUDIf()(ms.MusicShort == 1):
        # (Line 132) if(ms.ShortTimer < ms.MusicStart){
        if EUDIf()(ms.ShortTimer >= ms.MusicStart, neg=True):
            # (Line 133) foreach(cp : EUDLoopPlayer("Human")){
            for cp in EUDLoopPlayer("Human"):
                # (Line 134) setcurpl(cp);
                f_setcurpl(cp)
                # (Line 135) s.printf("\x13\x08！ \x04ShortTimer가 MusicStart값보다 작습니다.");
                s.printf("\x13\x08！ \x04ShortTimer가 MusicStart값보다 작습니다.")
                # (Line 136) Defeat();
                # (Line 137) }
                DoActions(Defeat())
                # (Line 138) }

            # (Line 139) }
        EUDEndIf()
        # (Line 140) if(ms.MusicSelect == 1){
    EUDEndIf()
    if EUDIf()(ms.MusicSelect == 1):
        # (Line 141) if(ms.MusicNumber < ms.musicNum1){
        if EUDIf()(ms.MusicNumber >= ms.musicNum1, neg=True):
            # (Line 142) foreach(cp : EUDLoopPlayer("Human")){
            for cp in EUDLoopPlayer("Human"):
                # (Line 143) setcurpl(cp);
                f_setcurpl(cp)
                # (Line 144) s.printf("\x13\x08！ \x04musicNum1가 MusicNumber값보다 높으면 안됩니다.");
                s.printf("\x13\x08！ \x04musicNum1가 MusicNumber값보다 높으면 안됩니다.")
                # (Line 145) Defeat();
                # (Line 146) }
                DoActions(Defeat())
                # (Line 147) }

            # (Line 148) if(ms.MusicNumber < ms.musicNum2){
        EUDEndIf()
        if EUDIf()(ms.MusicNumber >= ms.musicNum2, neg=True):
            # (Line 149) foreach(cp : EUDLoopPlayer("Human")){
            for cp in EUDLoopPlayer("Human"):
                # (Line 150) setcurpl(cp);
                f_setcurpl(cp)
                # (Line 151) s.printf("\x13\x08！ \x04musicNum2가 MusicNumber값보다 높으면 안됩니다.");
                s.printf("\x13\x08！ \x04musicNum2가 MusicNumber값보다 높으면 안됩니다.")
                # (Line 152) Defeat();
                # (Line 153) }
                DoActions(Defeat())
                # (Line 154) }

            # (Line 155) if(ms.MusicNumber < ms.musicNum3){
        EUDEndIf()
        if EUDIf()(ms.MusicNumber >= ms.musicNum3, neg=True):
            # (Line 156) foreach(cp : EUDLoopPlayer("Human")){
            for cp in EUDLoopPlayer("Human"):
                # (Line 157) setcurpl(cp);
                f_setcurpl(cp)
                # (Line 158) s.printf("\x13\x08！ \x04musicNum3가 MusicNumber값보다 높으면 안됩니다.");
                s.printf("\x13\x08！ \x04musicNum3가 MusicNumber값보다 높으면 안됩니다.")
                # (Line 159) Defeat();
                # (Line 160) }
                DoActions(Defeat())
                # (Line 161) }

            # (Line 162) if(ms.MusicNumber < ms.musicNum4){
        EUDEndIf()
        if EUDIf()(ms.MusicNumber >= ms.musicNum4, neg=True):
            # (Line 163) foreach(cp : EUDLoopPlayer("Human")){
            for cp in EUDLoopPlayer("Human"):
                # (Line 164) setcurpl(cp);
                f_setcurpl(cp)
                # (Line 165) s.printf("\x13\x08！ \x04musicNum4가 MusicNumber값보다 높으면 안됩니다.");
                s.printf("\x13\x08！ \x04musicNum4가 MusicNumber값보다 높으면 안됩니다.")
                # (Line 166) Defeat();
                # (Line 167) }
                DoActions(Defeat())
                # (Line 168) }

            # (Line 169) }
        EUDEndIf()
        # (Line 170) }
    EUDEndIf()
