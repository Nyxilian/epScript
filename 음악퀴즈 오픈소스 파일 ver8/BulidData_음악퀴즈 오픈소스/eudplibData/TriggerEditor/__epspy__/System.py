## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import opening as op;
import opening as op
# (Line 3) import functions as fc;
import functions as fc
# (Line 5) const orderLoc	= $L("Order1");
orderLoc = _CGFW(lambda: [GetLocationIndex("Order1")], 1)[0]
# (Line 6) var setUser		= 0; //유저
setUser = EUDCreateVariables(1)
_IGVA([setUser], lambda: [0])
# (Line 7) var UserNumber	= 0;
UserNumber = EUDCreateVariables(1)
_IGVA([UserNumber], lambda: [0])
# (Line 9) function OrderSys(){
@EUDFunc
def OrderSys():
    # (Line 10) for(var i=6; i>0; i--){
    i = EUDVariable()
    i << (6)
    if EUDWhile()(i <= 0, neg=True):
        def _t2():
            i.__isub__(1)
        # (Line 11) if(Bring(Force1, AtLeast, 1, 215, orderLoc+i) && Bring(Force1, Exactly, 0, 215, orderLoc+i-1)){
        if EUDIf()(EUDSCAnd()(Bring(Force1, AtLeast, 1, 215, orderLoc + i))(Bring(Force1, Exactly, 0, 215, orderLoc + i - 1))()):
            # (Line 12) MoveUnit(1, 215, Force1, orderLoc+i, orderLoc+i-1);
            # (Line 13) }
            DoActions(MoveUnit(1, 215, Force1, orderLoc + i, orderLoc + i - 1))
            # (Line 14) }
        EUDEndIf()
        # (Line 15) if(Command(fc.superUser, Exactly, 1, 215)){
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    if EUDIf()(Command(fc.superUser, Exactly, 1, 215)):
        # (Line 16) if(setUser != fc.superUser){
        if EUDIf()(setUser == fc.superUser, neg=True):
            # (Line 17) setUser = fc.superUser;
            setUser << (fc.superUser)
            # (Line 18) }
            # (Line 19) }
        EUDEndIf()
        # (Line 20) else{
    if EUDElse()():
        # (Line 21) for(var i=0; i<7; i++){
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i >= 7, neg=True):
            def _t7():
                i.__iadd__(1)
            # (Line 22) if(Bring(i, Exactly, 1, 215, orderLoc)){
            if EUDIf()(Bring(i, Exactly, 1, 215, orderLoc)):
                # (Line 23) if(setUser != i){setUser = i; for(var i=0; i<7; i++){op.TextUpdate[i] = 1;} break;}
                if EUDIf()(setUser == i, neg=True):
                    setUser << (i)
                    i_1 = EUDVariable()
                    i_1 << (0)
                    if EUDWhile()(i_1 >= 7, neg=True):
                        def _t11():
                            i_1.__iadd__(1)
                        _ARRW(op.TextUpdate, i_1) << (1)
                        EUDSetContinuePoint()
                        _t11()
                    EUDEndWhile()
                    EUDBreak()
                    # (Line 24) }
                EUDEndIf()
                # (Line 25) }
            EUDEndIf()
            # (Line 26) }
            EUDSetContinuePoint()
            _t7()
        EUDEndWhile()
        # (Line 27) UserNumber = 0;
    EUDEndIf()
    UserNumber << (0)
    # (Line 28) for(var i=0; i<7; i++){if(Command(i, Exactly, 1, 215)){UserNumber += 1;}}
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 7, neg=True):
        def _t13():
            i.__iadd__(1)
        if EUDIf()(Command(i, Exactly, 1, 215)):
            UserNumber.__iadd__(1)
        EUDEndIf()
        # (Line 29) }
        EUDSetContinuePoint()
        _t13()
    EUDEndWhile()
