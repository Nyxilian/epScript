## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import bgm as bgm;
import bgm as bgm
# (Line 3) var timer_switch = False;
timer_switch = EUDCreateVariables(1)
_IGVA([timer_switch], lambda: [False])
# (Line 4) var i_timer = 0;
i_timer = EUDCreateVariables(1)
_IGVA([i_timer], lambda: [0])
# (Line 5) var Chapter = 0;
Chapter = EUDCreateVariables(1)
_IGVA([Chapter], lambda: [0])
# (Line 7) function set_BG(number) { //배경 밝기 0 ~ 31
@EUDFunc
def f_set_BG(number):
    # (Line 8) SetMemory(0x657A9C, SetTo, number);
    # (Line 9) }
    DoActions(SetMemory(0x657A9C, SetTo, number))
    # (Line 11) function time_flow() { //프레임++

@EUDFunc
def f_time_flow():
    # (Line 12) if(Chapter < 12) {
    if EUDIf()(Chapter >= 12, neg=True):
        # (Line 13) i_timer++;
        i_timer.__iadd__(1)
        # (Line 14) }
        # (Line 15) }
    EUDEndIf()
    # (Line 17) function timer(time1, time2) { //프레임단위임 주의할 것.

@EUDFunc
def f_timer(time1, time2):
    # (Line 18) if(i_timer >= time1 && i_timer < time2) {
    if EUDIf()(EUDSCAnd()(i_timer >= time1)(i_timer >= time2, neg=True)()):
        # (Line 19) return True;
        EUDReturn(True)
        # (Line 20) }
        # (Line 21) return False;
    EUDEndIf()
    EUDReturn(False)
    # (Line 22) }
    # (Line 24) function time_reset() { //타임 리셋

@EUDFunc
def f_time_reset():
    # (Line 25) i_timer = 0;
    i_timer << (0)
    # (Line 26) }
    # (Line 28) function Chapter_change(number) { //챕터 변환

@EUDFunc
def Chapter_change(number):
    # (Line 29) Chapter = number;
    Chapter << (number)
    # (Line 30) }
    # (Line 32) function current_Chapter() { //현재 챕터

@EUDFunc
def f_current_Chapter():
    # (Line 33) return Chapter;
    EUDReturn(Chapter)
    # (Line 34) }
    # (Line 36) function press_z(cp) {

@EUDFunc
def f_press_z(cp):
    # (Line 37) if(Deaths(cp, Exactly, 1, "Power Generator")) {
    if EUDIf()(Deaths(cp, Exactly, 1, "Power Generator")):
        # (Line 38) return True;
        EUDReturn(True)
        # (Line 39) }
        # (Line 40) return False;
    EUDEndIf()
    EUDReturn(False)
    # (Line 41) }
    # (Line 43) function press_x(cp) {

@EUDFunc
def f_press_x(cp):
    # (Line 44) if(Deaths(cp, Exactly, 2, "Power Generator")) {
    if EUDIf()(Deaths(cp, Exactly, 2, "Power Generator")):
        # (Line 45) return True;
        EUDReturn(True)
        # (Line 46) }
        # (Line 47) return False;
    EUDEndIf()
    EUDReturn(False)
    # (Line 48) }
    # (Line 50) function press_Ins(cp) {

@EUDFunc
def f_press_Ins(cp):
    # (Line 51) if(Deaths(cp, Exactly, 3, "Power Generator")) {
    if EUDIf()(Deaths(cp, Exactly, 3, "Power Generator")):
        # (Line 52) return True;
        EUDReturn(True)
        # (Line 53) }
        # (Line 54) return False;
    EUDEndIf()
    EUDReturn(False)
    # (Line 55) }
    # (Line 57) function press_Del(cp) {

@EUDFunc
def f_press_Del(cp):
    # (Line 58) if(Deaths(cp, Exactly, 4, "Power Generator")) {
    if EUDIf()(Deaths(cp, Exactly, 4, "Power Generator")):
        # (Line 59) return True;
        EUDReturn(True)
        # (Line 60) }
        # (Line 61) return False;
    EUDEndIf()
    EUDReturn(False)
    # (Line 62) }
    # (Line 64) function off_bgm(cp) {

@EUDFunc
def f_off_bgm(cp):
    # (Line 65) if(press_Del(cp) == True && bgm.current_switch(cp) == 1) {
    if EUDIf()(EUDSCAnd()(f_press_Del(cp) == True)(bgm.f_current_switch(cp) == 1)()):
        # (Line 66) bgm.set_switch(cp, 0);
        bgm.f_set_switch(cp, 0)
        # (Line 67) return True;
        EUDReturn(True)
        # (Line 68) }
        # (Line 69) return False;
    EUDEndIf()
    EUDReturn(False)
    # (Line 70) }
    # (Line 72) function on_bgm(cp) {

@EUDFunc
def f_on_bgm(cp):
    # (Line 73) if(press_Ins(cp) == True && bgm.current_switch(cp) == 0) {
    if EUDIf()(EUDSCAnd()(f_press_Ins(cp) == True)(bgm.f_current_switch(cp) == 0)()):
        # (Line 74) bgm.set_switch(cp, 1);
        bgm.f_set_switch(cp, 1)
        # (Line 75) bgm.set_length(cp, 408);
        bgm.f_set_length(cp, 408)
        # (Line 76) return True;
        EUDReturn(True)
        # (Line 77) }
        # (Line 78) return False;
    EUDEndIf()
    EUDReturn(False)
    # (Line 79) }
