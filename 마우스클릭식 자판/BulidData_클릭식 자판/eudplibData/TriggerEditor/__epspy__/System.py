## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) var readMode = 1;
readMode = EUDCreateVariables(1)
_IGVA([readMode], lambda: [1])
# (Line 2) var screenGridX = 0;
screenGridX = EUDCreateVariables(1)
_IGVA([screenGridX], lambda: [0])
# (Line 3) var screenGridY = 0;
screenGridY = EUDCreateVariables(1)
_IGVA([screenGridY], lambda: [0])
# (Line 4) var screenSizeX = 0;
screenSizeX = EUDCreateVariables(1)
_IGVA([screenSizeX], lambda: [0])
# (Line 5) var screenSizeY = 0;
screenSizeY = EUDCreateVariables(1)
_IGVA([screenSizeY], lambda: [0])
# (Line 6) var mouseX = 0;
mouseX = EUDCreateVariables(1)
_IGVA([mouseX], lambda: [0])
# (Line 7) var mouseY = 0;
mouseY = EUDCreateVariables(1)
_IGVA([mouseY], lambda: [0])
# (Line 8) const mouseMX = EPD(0x6CDDC4);
mouseMX = _CGFW(lambda: [EPD(0x6CDDC4)], 1)[0]
# (Line 9) const mouseMY = EPD(0x6CDDC8);
mouseMY = _CGFW(lambda: [EPD(0x6CDDC8)], 1)[0]
# (Line 11) const mouseClick = PVariable();
mouseClick = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 12) const mouseUserX = PVariable();
mouseUserX = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 13) const mouseUserY = PVariable();
mouseUserY = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 14) const screenUserX = PVariable();
screenUserX = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 16) const textUpdate = PVariable();
textUpdate = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 17) const colorL = [Db("\x04"), Db("\x1F")];
colorL = _CGFW(lambda: [_ARR(FlattenList([Db("\x04"), Db("\x1F")]))], 1)[0]
# (Line 18) const keyboardStatus = [Db("\x07On"), Db("\x08Off")];
keyboardStatus = _CGFW(lambda: [_ARR(FlattenList([Db("\x07On"), Db("\x08Off")]))], 1)[0]
# (Line 20) function variableInit(){
@EUDFunc
def f_variableInit():
    # (Line 21) EUDRegisterObjectToNamespace("readMode", readMode);
    EUDRegisterObjectToNamespace("readMode", readMode)
    # (Line 22) EUDRegisterObjectToNamespace("mouseClick", mouseClick);
    EUDRegisterObjectToNamespace("mouseClick", mouseClick)
    # (Line 23) EUDRegisterObjectToNamespace("screenSizeX", screenSizeX);
    EUDRegisterObjectToNamespace("screenSizeX", screenSizeX)
    # (Line 24) EUDRegisterObjectToNamespace("mouseUserX", mouseUserX);
    EUDRegisterObjectToNamespace("mouseUserX", mouseUserX)
    # (Line 25) EUDRegisterObjectToNamespace("mouseUserY", mouseUserY);
    EUDRegisterObjectToNamespace("mouseUserY", mouseUserY)
    # (Line 26) EUDRegisterObjectToNamespace("screenUserX", screenUserX);
    EUDRegisterObjectToNamespace("screenUserX", screenUserX)
    # (Line 27) }
    # (Line 29) const checkscreenLoc = $L("checkScreen");

checkscreenLoc = _CGFW(lambda: [GetLocationIndex("checkScreen")], 1)[0]
# (Line 30) function checkScreenMouse(){
@EUDFunc
def f_checkScreenMouse():
    # (Line 31) if(IsUserCP()){
    if EUDIf()(IsUserCP()):
        # (Line 32) mouseX = dwread_epd_safe(mouseMX);
        mouseX << (f_dwread_epd_safe(mouseMX))
        # (Line 33) mouseY = dwread_epd_safe(mouseMY);
        mouseY << (f_dwread_epd_safe(mouseMY))
        # (Line 34) screenGridX = dwread_epd(EPD(0x62848C));
        screenGridX << (f_dwread_epd(EPD(0x62848C)))
        # (Line 35) screenGridY = dwread_epd(EPD(0x6284A8));
        screenGridY << (f_dwread_epd(EPD(0x6284A8)))
        # (Line 36) setloc(checkscreenLoc, 128*16, 128*16); //중앙 (맵사이즈*16, 맵사이즈*16)
        f_setloc(checkscreenLoc, 128 * 16, 128 * 16)
        # (Line 37) CenterView(checkscreenLoc);
        # (Line 38) const ScreenX2 = dwread_epd(EPD(0x62848C));
        DoActions(CenterView(checkscreenLoc))
        ScreenX2 = f_dwread_epd(EPD(0x62848C))
        # (Line 39) const ScreenY2 = dwread_epd(EPD(0x6284A8));
        ScreenY2 = f_dwread_epd(EPD(0x6284A8))
        # (Line 40) screenSizeX = 128*16 - ScreenX2;
        screenSizeX << (128 * 16 - ScreenX2)
        # (Line 41) screenSizeY = 128*16 - ScreenY2;
        screenSizeY << (128 * 16 - ScreenY2)
        # (Line 42) const screenX = screenGridX + screenSizeX;
        screenX = screenGridX + screenSizeX
        # (Line 43) const screenY = screenGridY + screenSizeY;
        screenY = screenGridY + screenSizeY
        # (Line 44) setloc(checkscreenLoc, screenX, screenY);
        f_setloc(checkscreenLoc, screenX, screenY)
        # (Line 45) CenterView(checkscreenLoc);
        # (Line 46) }
        DoActions(CenterView(checkscreenLoc))
        # (Line 47) }
    EUDEndIf()
