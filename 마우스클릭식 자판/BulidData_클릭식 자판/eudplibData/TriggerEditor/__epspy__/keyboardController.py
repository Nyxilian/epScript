## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import System as sys;
import System as sys
# (Line 2) import main as m;
import main as m
# (Line 4) const s = StringBuffer(1024);
s = _CGFW(lambda: [StringBuffer(1024)], 1)[0]
# (Line 6) const keySwitch = PVariable(); //0 On 1 Off
keySwitch = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 8) function controllerText(cp) {
@EUDFunc
def f_controllerText(cp):
    # (Line 9) const mmX = sys.mouseUserX[cp]+320-sys.screenUserX[cp];
    mmX = sys.mouseUserX[cp] + 320 - sys.screenUserX[cp]
    # (Line 10) const mmY = sys.mouseUserY[cp];
    mmY = sys.mouseUserY[cp]
    # (Line 11) if(276 <= mmX && mmX <= 360 && 296 <= mmY && mmY <= 307 && sys.mouseClick[cp] == 1) {
    if EUDIf()(EUDSCAnd()(276 <= mmX)(mmX <= 360)(296 <= mmY)(mmY <= 307)(sys.mouseClick[cp] == 1)()):
        # (Line 12) if(keySwitch[cp] == 0) {
        if EUDIf()(keySwitch[cp] == 0):
            # (Line 13) keySwitch[cp] = 1;
            _ARRW(keySwitch, cp) << (1)
            # (Line 14) s.printAt(1, "\n\n\n\n\n\n");
            s.printAt(1, "\n\n\n\n\n\n")
            # (Line 15) } else {
        if EUDElse()():
            # (Line 16) keySwitch[cp] = 0;
            _ARRW(keySwitch, cp) << (0)
            # (Line 17) s.printAt(1, "\n\x13\x04[ A ]\t[ B ]\t[ C ]\t[ D ]\t[ E ]\t[ F ]\n\x13\x04[ G ]\t[ H ]\t[  I ]\t[ J ]\t[ K ]\t[ L ]\n\x13\x04[ M ]\t[ N ]\t[ O ]\t[ P ]\t[ Q ]\t[ R ]\n\x13\x04[ S ]\t[ T ]\t[ U ]\t[ V ]\t[ W ]\t[ X ]\n\x13\x04[ Y ]\t\t\t\t\t[ Z ]");
            s.printAt(1, "\n\x13\x04[ A ]\t[ B ]\t[ C ]\t[ D ]\t[ E ]\t[ F ]\n\x13\x04[ G ]\t[ H ]\t[  I ]\t[ J ]\t[ K ]\t[ L ]\n\x13\x04[ M ]\t[ N ]\t[ O ]\t[ P ]\t[ Q ]\t[ R ]\n\x13\x04[ S ]\t[ T ]\t[ U ]\t[ V ]\t[ W ]\t[ X ]\n\x13\x04[ Y ]\t\t\t\t\t[ Z ]")
            # (Line 18) }
            # (Line 19) }
        EUDEndIf()
        # (Line 20) eprintln("\x04Keyboard : ", ptr2s(sys.keyboardStatus[keySwitch[cp]]));
    EUDEndIf()
    f_eprintln("\x04Keyboard : ", ptr2s(sys.keyboardStatus[keySwitch[cp]]))
    # (Line 21) }
