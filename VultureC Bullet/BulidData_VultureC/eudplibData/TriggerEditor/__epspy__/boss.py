## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import functions as fx;
import functions as fx
# (Line 3) var bossLoc = $L("Boss");
bossLoc = EUDCreateVariables(1)
_IGVA([bossLoc], lambda: [GetLocationIndex("Boss")])
# (Line 4) var playerLoc = $L("PlayerRevive");
playerLoc = EUDCreateVariables(1)
_IGVA([playerLoc], lambda: [GetLocationIndex("PlayerRevive")])
# (Line 5) var bossSwitch = 0;
bossSwitch = EUDCreateVariables(1)
_IGVA([bossSwitch], lambda: [0])
# (Line 6) var playerSwitch = 0;
playerSwitch = EUDCreateVariables(1)
_IGVA([playerSwitch], lambda: [0])
# (Line 7) var bossEPD;
bossEPD = EUDVariable()
# (Line 8) var bossFace;
bossFace = EUDVariable()
# (Line 9) var bossAttkCycle;
bossAttkCycle = EUDVariable()
# (Line 11) function stage1() {
@EUDFunc
def f_stage1():
    # (Line 12) bossFace = bread_epd(bossEPD + 0x21/4, 3);
    bossFace << (f_bread_epd(bossEPD + 0x21 // 4, 3))
    # (Line 13) bossAttkCycle = bread_epd(bossEPD + 0x55/4, 1);
    bossAttkCycle << (f_bread_epd(bossEPD + 0x55 // 4, 1))
    # (Line 15) if(bossSwitch == 0) {
    if EUDIf()(bossSwitch == 0):
        # (Line 16) bossEPD = fx.SetNextUnitEPD();
        bossEPD << (fx.SetNextUnitEPD())
        # (Line 17) CreateUnit(1, 16, bossLoc, 6);
        # (Line 18) bossSwitch = 1;
        DoActions(CreateUnit(1, 16, bossLoc, 6))
        bossSwitch << (1)
        # (Line 19) }
        # (Line 20) if(playerSwitch == 0) {
    EUDEndIf()
    if EUDIf()(playerSwitch == 0):
        # (Line 21) foreach(cp : EUDLoopPlayer("Human")) {
        for cp in EUDLoopPlayer("Human"):
            # (Line 22) CreateUnit(1, 19, playerLoc, cp);
            # (Line 23) }
            DoActions(CreateUnit(1, 19, playerLoc, cp))
            # (Line 24) playerSwitch = 1;

        playerSwitch << (1)
        # (Line 25) }
        # (Line 26) if(fx.bulletTimer(48) == True) {
    EUDEndIf()
    if EUDIf()(fx.f_bulletTimer(48) == True):
        # (Line 27) CreateUnit(7, 194, bossLoc, 7);
        # (Line 28) setcurpl(7);
        DoActions(CreateUnit(7, 194, bossLoc, 7))
        f_setcurpl(7)
        # (Line 29) RunAIScriptAt("JYDg", bossLoc);
        # (Line 30) }
        DoActions(RunAIScriptAt("JYDg", bossLoc))
        # (Line 31) if(bossAttkCycle == 43) {
    EUDEndIf()
    if EUDIf()(bossAttkCycle == 43):
        # (Line 32) var currentMissile;
        currentMissile = EUDVariable()
        # (Line 33) const head = [240, 0, 16];
        head = _ARR(FlattenList([240, 0, 16]))
        # (Line 34) for(var i = 0; i < 3; i++) {
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i >= 3, neg=True):
            def _t6():
                i.__iadd__(1)
            # (Line 35) currentMissile = fx.SetNextUnitEPD();
            currentMissile << (fx.SetNextUnitEPD())
            # (Line 36) CreateUnit(1, 197, bossLoc, 6);
            # (Line 37) fx.SetMissileDir(currentMissile, (bossFace + head[i]) % 255);
            DoActions(CreateUnit(1, 197, bossLoc, 6))
            fx.SetMissileDir(currentMissile, (bossFace + head[i]) % 255)
            # (Line 38) }
            # (Line 39) Order(197, 6, "Anywhere", Move, playerLoc);
            EUDSetContinuePoint()
            _t6()
        EUDEndWhile()
        # (Line 40) }
        DoActions(Order(197, 6, "Anywhere", Move, playerLoc))
        # (Line 41) }
    EUDEndIf()
