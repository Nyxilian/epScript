## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import functions as fx;
import functions as fx
# (Line 3) const s = StringBuffer(1024);
s = _CGFW(lambda: [StringBuffer(1024)], 1)[0]
# (Line 4) var time = 0;
time = EUDCreateVariables(1)
_IGVA([time], lambda: [0])
# (Line 5) var op_switch = 0;
op_switch = EUDCreateVariables(1)
_IGVA([op_switch], lambda: [0])
# (Line 7) function timer(num1, num2) {
@EUDFunc
def f_timer(num1, num2):
    # (Line 8) if(num1 <= time && time < num2) {
    if EUDIf()(EUDSCAnd()(num1 <= time)(time >= num2, neg=True)()):
        # (Line 9) return True;
        EUDReturn(True)
        # (Line 10) }
        # (Line 11) return False;
    EUDEndIf()
    EUDReturn(False)
    # (Line 12) }
    # (Line 14) function selection() {//0

@EUDFunc
def f_selection():
    # (Line 15) foreach(cp : EUDLoopPlayer("Human")) {
    for cp in EUDLoopPlayer("Human"):
        # (Line 16) setcurpl(cp);
        f_setcurpl(cp)
        # (Line 17) CenterView("Opening");
        # (Line 18) if(timer(0, 96)) {
        DoActions(CenterView("Opening"))
        if EUDIf()(f_timer(0, 96)):
            # (Line 19) s.printAt(0, "\n\n\n\n\n\n\n\n");
            s.printAt(0, "\n\n\n\n\n\n\n\n")
            # (Line 20) }
            # (Line 21) if(timer(96, 480)) {
        EUDEndIf()
        if EUDIf()(f_timer(96, 480)):
            # (Line 22) s.printAt(0, "\n\n\n");
            s.printAt(0, "\n\n\n")
            # (Line 23) s.printAt(3, "\x13\x1E━━━━━\x02━━━━━\x04━━━━━━━━\x02━━━━━\x1E━━━━━");
            s.printAt(3, "\x13\x1E━━━━━\x02━━━━━\x04━━━━━━━━\x02━━━━━\x1E━━━━━")
            # (Line 24) s.printAt(4, "\n");
            s.printAt(4, "\n")
            # (Line 25) s.fadeIn("\x13\x04Vulture\x08C \x1FB\x04ullet", wait = 8, line = 5);
            s.fadeIn("\x13\x04Vulture\x08C \x1FB\x04ullet", wait=8, line=5)
            # (Line 26) s.printAt(7, "\n");
            s.printAt(7, "\n")
            # (Line 27) s.printAt(8, "\x13\x1E━━━━━\x02━━━━━\x04━━━━━━━━\x02━━━━━\x1E━━━━━");
            s.printAt(8, "\x13\x1E━━━━━\x02━━━━━\x04━━━━━━━━\x02━━━━━\x1E━━━━━")
            # (Line 28) }
            # (Line 29) if(timer(200, 480)) {
        EUDEndIf()
        if EUDIf()(f_timer(200, 480)):
            # (Line 30) s.fadeIn("\x13\x07C\x04reated \x08b\x04y \x1CK\x04iyoN.\x11C\x04hocochip", wait = 6, line = 6);
            s.fadeIn("\x13\x07C\x04reated \x08b\x04y \x1CK\x04iyoN.\x11C\x04hocochip", wait=6, line=6)
            # (Line 31) }
            # (Line 32) if(timer(480, 10000)) {
        EUDEndIf()
        if EUDIf()(f_timer(480, 10000)):
            # (Line 33) s.printAt(0, "\n\n\n");
            s.printAt(0, "\n\n\n")
            # (Line 34) s.printAt(3, "\x13\x1E━━━━━\x02━━━━━\x04━━━━━━━━\x02━━━━━\x1E━━━━━");
            s.printAt(3, "\x13\x1E━━━━━\x02━━━━━\x04━━━━━━━━\x02━━━━━\x1E━━━━━")
            # (Line 35) s.printAt(4, "\n");
            s.printAt(4, "\n")
            # (Line 36) s.printAt(5, "\x13\x08방장\x04이 \x03오프닝 여부\x04를 설정합니다\n\x13\x04본다 : \x07Z\x04키  /  안본다 : \x08X\x04키");
            s.printAt(5, "\x13\x08방장\x04이 \x03오프닝 여부\x04를 설정합니다\n\x13\x04본다 : \x07Z\x04키  /  안본다 : \x08X\x04키")
            # (Line 37) s.printAt(7, "\n");
            s.printAt(7, "\n")
            # (Line 38) s.printAt(8, "\x13\x1E━━━━━\x02━━━━━\x04━━━━━━━━\x02━━━━━\x1E━━━━━");
            s.printAt(8, "\x13\x1E━━━━━\x02━━━━━\x04━━━━━━━━\x02━━━━━\x1E━━━━━")
            # (Line 39) if(fx.press_Z(0) == True) {
            if EUDIf()(fx.f_press_Z(0) == True):
                # (Line 40) op_switch = 2;
                op_switch << (2)
                # (Line 41) time = 350;
                time << (350)
                # (Line 42) s.printAt(0, "\n\n\n");
                s.printAt(0, "\n\n\n")
                # (Line 43) s.printAt(3, "\x13\x1E━━━━━\x02━━━━━\x04━━━━━━━━\x02━━━━━\x1E━━━━━");
                s.printAt(3, "\x13\x1E━━━━━\x02━━━━━\x04━━━━━━━━\x02━━━━━\x1E━━━━━")
                # (Line 44) s.printAt(4, "\n");
                s.printAt(4, "\n")
                # (Line 45) s.printAt(5, "\x13\x08방장\x04이 \x03오프닝 여부\x04를 설정합니다\n\x13\x03오프닝 보기\x04를 선택하셨습니다.");
                s.printAt(5, "\x13\x08방장\x04이 \x03오프닝 여부\x04를 설정합니다\n\x13\x03오프닝 보기\x04를 선택하셨습니다.")
                # (Line 46) s.printAt(7, "\n");
                s.printAt(7, "\n")
                # (Line 47) s.printAt(8, "\x13\x1E━━━━━\x02━━━━━\x04━━━━━━━━\x02━━━━━\x1E━━━━━");
                s.printAt(8, "\x13\x1E━━━━━\x02━━━━━\x04━━━━━━━━\x02━━━━━\x1E━━━━━")
                # (Line 48) }
                # (Line 49) if(fx.press_X(0) == True) {
            EUDEndIf()
            if EUDIf()(fx.f_press_X(0) == True):
                # (Line 50) op_switch = 1;
                op_switch << (1)
                # (Line 51) time = 0;
                time << (0)
                # (Line 52) }
                # (Line 53) }
            EUDEndIf()
            # (Line 54) }
        EUDEndIf()
        # (Line 55) }

    # (Line 57) function openingSkip() {//1

@EUDFunc
def f_openingSkip():
    # (Line 58) foreach(cp : EUDLoopPlayer("Human")) {
    for cp in EUDLoopPlayer("Human"):
        # (Line 59) setcurpl(cp);
        f_setcurpl(cp)
        # (Line 60) if(timer(0, 140)) {
        if EUDIf()(f_timer(0, 140)):
            # (Line 61) s.printAt(0, "\n\n\n");
            s.printAt(0, "\n\n\n")
            # (Line 62) s.printAt(3, "\x13\x1E━━━━━\x02━━━━━\x04━━━━━━━━\x02━━━━━\x1E━━━━━");
            s.printAt(3, "\x13\x1E━━━━━\x02━━━━━\x04━━━━━━━━\x02━━━━━\x1E━━━━━")
            # (Line 63) s.printAt(4, "\n");
            s.printAt(4, "\n")
            # (Line 64) s.printAt(5, "\x13\x08방장\x04이 \x03오프닝 여부\x04를 설정합니다\n\x13\x03오프닝 스킵\x04을 선택하셨습니다.");
            s.printAt(5, "\x13\x08방장\x04이 \x03오프닝 여부\x04를 설정합니다\n\x13\x03오프닝 스킵\x04을 선택하셨습니다.")
            # (Line 65) s.printAt(7, "\n");
            s.printAt(7, "\n")
            # (Line 66) s.printAt(8, "\x13\x1E━━━━━\x02━━━━━\x04━━━━━━━━\x02━━━━━\x1E━━━━━");
            s.printAt(8, "\x13\x1E━━━━━\x02━━━━━\x04━━━━━━━━\x02━━━━━\x1E━━━━━")
            # (Line 67) }
            # (Line 68) }
        EUDEndIf()
        # (Line 69) if(timer(140, 141)) {

    if EUDIf()(f_timer(140, 141)):
        # (Line 70) fx.set_Stage(1);
        fx.f_set_Stage(1)
        # (Line 71) }
        # (Line 72) }
    EUDEndIf()
    # (Line 74) function opening() {//2

@EUDFunc
def f_opening():
    # (Line 77) foreach(cp : EUDLoopPlayer("Human")) {
    for cp in EUDLoopPlayer("Human"):
        # (Line 78) setcurpl(cp);
        f_setcurpl(cp)
        # (Line 79) if(timer(430, 480)) {
        if EUDIf()(f_timer(430, 480)):
            # (Line 80) s.printAt(0, "\n\n\n\n\n\n\n\n\n");
            s.printAt(0, "\n\n\n\n\n\n\n\n\n")
            # (Line 81) }
            # (Line 82) if(timer(480, 720)) {
        EUDEndIf()
        if EUDIf()(f_timer(480, 720)):
            # (Line 83) s.printAt(0, "\n\n\n");
            s.printAt(0, "\n\n\n")
            # (Line 84) s.printAt(3, "\x13\x1E━━━━━\x02━━━━━\x04━━ \x1F[\x04 공  지 \x1F]\x04 ━━\x02━━━━━\x1E━━━━━");
            s.printAt(3, "\x13\x1E━━━━━\x02━━━━━\x04━━ \x1F[\x04 공  지 \x1F]\x04 ━━\x02━━━━━\x1E━━━━━")
            # (Line 85) s.printAt(4, "\n");
            s.printAt(4, "\n")
            # (Line 86) s.printAt(5, "\x13\x04이 맵은 \x03EUD \x07벌쳐컨트롤 \x04맵으로\n\x13\x04공속이 \x082배\x04가 된 \x1F공중 벌쳐\x04를 이용합니다");
            s.printAt(5, "\x13\x04이 맵은 \x03EUD \x07벌쳐컨트롤 \x04맵으로\n\x13\x04공속이 \x082배\x04가 된 \x1F공중 벌쳐\x04를 이용합니다")
            # (Line 87) s.printAt(7, "\n");
            s.printAt(7, "\n")
            # (Line 88) s.printAt(8, "\x13\x1E━━━━━\x02━━━━━\x04━━━━━━━━\x02━━━━━\x1E━━━━━");
            s.printAt(8, "\x13\x1E━━━━━\x02━━━━━\x04━━━━━━━━\x02━━━━━\x1E━━━━━")
            # (Line 89) }
            # (Line 90) if(timer(720, 960)) {
        EUDEndIf()
        if EUDIf()(f_timer(720, 960)):
            # (Line 91) s.printAt(0, "\n\n\n");
            s.printAt(0, "\n\n\n")
            # (Line 92) s.printAt(3, "\x13\x1E━━━━━\x02━━━━━\x04━━ \x1F[\x04 공  지 \x1F]\x04 ━━\x02━━━━━\x1E━━━━━");
            s.printAt(3, "\x13\x1E━━━━━\x02━━━━━\x04━━ \x1F[\x04 공  지 \x1F]\x04 ━━\x02━━━━━\x1E━━━━━")
            # (Line 93) s.printAt(4, "\n");
            s.printAt(4, "\n")
            # (Line 94) s.printAt(5, "\x13\x04특수한 환경에서의 벌처컨트롤이기에\n\x13\x07홀드[H]\x04를 이용한 \x03홀컨 사용\x04과 \x1F속업\x04을 \x11권장\x04드립니다");
            s.printAt(5, "\x13\x04특수한 환경에서의 벌처컨트롤이기에\n\x13\x07홀드[H]\x04를 이용한 \x03홀컨 사용\x04과 \x1F속업\x04을 \x11권장\x04드립니다")
            # (Line 95) s.printAt(7, "\n");
            s.printAt(7, "\n")
            # (Line 96) s.printAt(8, "\x13\x1E━━━━━\x02━━━━━\x04━━━━━━━━\x02━━━━━\x1E━━━━━");
            s.printAt(8, "\x13\x1E━━━━━\x02━━━━━\x04━━━━━━━━\x02━━━━━\x1E━━━━━")
            # (Line 97) }
            # (Line 98) if(timer(960, 1200)) {
        EUDEndIf()
        if EUDIf()(f_timer(960, 1200)):
            # (Line 99) s.printAt(0, "\n\n\n");
            s.printAt(0, "\n\n\n")
            # (Line 100) s.printAt(3, "\x13\x1E━━━━━\x02━━━━━\x04━━ \x1F[\x04 공  지 \x1F]\x04 ━━\x02━━━━━\x1E━━━━━");
            s.printAt(3, "\x13\x1E━━━━━\x02━━━━━\x04━━ \x1F[\x04 공  지 \x1F]\x04 ━━\x02━━━━━\x1E━━━━━")
            # (Line 101) s.printAt(4, "\n");
            s.printAt(4, "\n")
            # (Line 102) s.printAt(5, "\x13\x03브금\x04은 \x08D\x04elete키로 끌 수 있으며\n\x13\x07I\x04nsert키로 언제든지 다시 킬 수 있습니다");
            s.printAt(5, "\x13\x03브금\x04은 \x08D\x04elete키로 끌 수 있으며\n\x13\x07I\x04nsert키로 언제든지 다시 킬 수 있습니다")
            # (Line 103) s.printAt(7, "\n");
            s.printAt(7, "\n")
            # (Line 104) s.printAt(8, "\x13\x1E━━━━━\x02━━━━━\x04━━━━━━━━\x02━━━━━\x1E━━━━━");
            s.printAt(8, "\x13\x1E━━━━━\x02━━━━━\x04━━━━━━━━\x02━━━━━\x1E━━━━━")
            # (Line 105) }
            # (Line 106) if(timer(1200, 1440)) {
        EUDEndIf()
        if EUDIf()(f_timer(1200, 1440)):
            # (Line 107) s.printAt(0, "\n\n\n");
            s.printAt(0, "\n\n\n")
            # (Line 108) s.printAt(3, "\x13\x1E━━━━━\x02━━━━━\x04━━ \x1F[\x04 공  지 \x1F]\x04 ━━\x02━━━━━\x1E━━━━━");
            s.printAt(3, "\x13\x1E━━━━━\x02━━━━━\x04━━ \x1F[\x04 공  지 \x1F]\x04 ━━\x02━━━━━\x1E━━━━━")
            # (Line 109) s.printAt(4, "\n");
            s.printAt(4, "\n")
            # (Line 110) s.printAt(5, "\x13\x08게임\x04을 시작하겠습니다\n\x13\x07행운\x04을 빕니다 \x03G\x04ood \x03L\x04uck :)");
            s.printAt(5, "\x13\x08게임\x04을 시작하겠습니다\n\x13\x07행운\x04을 빕니다 \x03G\x04ood \x03L\x04uck :)")
            # (Line 111) s.printAt(7, "\n");
            s.printAt(7, "\n")
            # (Line 112) s.printAt(8, "\x13\x1E━━━━━\x02━━━━━\x04━━━━━━━━\x02━━━━━\x1E━━━━━");
            s.printAt(8, "\x13\x1E━━━━━\x02━━━━━\x04━━━━━━━━\x02━━━━━\x1E━━━━━")
            # (Line 113) }
            # (Line 114) if(timer(1440, 1536)) {
        EUDEndIf()
        if EUDIf()(f_timer(1440, 1536)):
            # (Line 115) s.printAt(0, "\n\n\n");
            s.printAt(0, "\n\n\n")
            # (Line 116) s.printAt(3, "\x13\x1E━━━━━\x02━━━━━\x04━━ \x1F[\x04 공  지 \x1F]\x04 ━━\x02━━━━━\x1E━━━━━");
            s.printAt(3, "\x13\x1E━━━━━\x02━━━━━\x04━━ \x1F[\x04 공  지 \x1F]\x04 ━━\x02━━━━━\x1E━━━━━")
            # (Line 117) s.printAt(4, "\x13\x08S\x04pecial \x1FT\x04hanks to\n\x13\x11A\x04vlos\n\x13\x07S\x04noopCatt\n\x13\x1CK\x04iyoN.\x08Z\x04arky");
            s.printAt(4, "\x13\x08S\x04pecial \x1FT\x04hanks to\n\x13\x11A\x04vlos\n\x13\x07S\x04noopCatt\n\x13\x1CK\x04iyoN.\x08Z\x04arky")
            # (Line 118) s.printAt(8, "\x13\x1E━━━━━\x02━━━━━\x04━━━━━━━━\x02━━━━━\x1E━━━━━");
            s.printAt(8, "\x13\x1E━━━━━\x02━━━━━\x04━━━━━━━━\x02━━━━━\x1E━━━━━")
            # (Line 119) }
            # (Line 120) }
        EUDEndIf()
        # (Line 122) if(timer(1536, 1537)) {

    if EUDIf()(f_timer(1536, 1537)):
        # (Line 124) fx.set_Stage(1);
        fx.f_set_Stage(1)
        # (Line 125) }
        # (Line 126) }
    EUDEndIf()
    # (Line 128) function select() {

@EUDFunc
def f_select():
    # (Line 129) switch (op_switch) {
    EUDSwitch(op_switch)
    # (Line 130) case 0:
    _t1 = EUDSwitchCase()
    # (Line 131) selection();
    if _t1(0):
        f_selection()
        # (Line 132) break;
        EUDBreak()
        # (Line 133) case 1:
    _t2 = EUDSwitchCase()
    # (Line 134) openingSkip();
    if _t2(1):
        f_openingSkip()
        # (Line 135) break;
        EUDBreak()
        # (Line 136) case 2:
    _t3 = EUDSwitchCase()
    # (Line 137) opening();
    if _t3(2):
        f_opening()
        # (Line 138) break;
        EUDBreak()
        # (Line 139) default:
    # (Line 140) break;
    if EUDSwitchDefault()():
        EUDBreak()
        # (Line 141) }
    # (Line 142) time++;
    EUDEndSwitch()
    time.__iadd__(1)
    # (Line 143) }
