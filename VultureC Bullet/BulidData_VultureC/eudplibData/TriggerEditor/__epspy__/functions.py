## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import TriggerEditor.TETools as tt;
from TriggerEditor import TETools as tt
# (Line 2) import unitlooper as ul;
import unitlooper as ul
# (Line 3) import bgm as bgm;
import bgm as bgm
# (Line 5) const s = StringBuffer(1024);
s = _CGFW(lambda: [StringBuffer(1024)], 1)[0]
# (Line 7) var bossLoc = $L("Boss");
bossLoc = EUDCreateVariables(1)
_IGVA([bossLoc], lambda: [GetLocationIndex("Boss")])
# (Line 8) var bulletTime = 0;
bulletTime = EUDCreateVariables(1)
_IGVA([bulletTime], lambda: [0])
# (Line 9) var playerSwitch = 0; //0 Off, 1 On
playerSwitch = EUDCreateVariables(1)
_IGVA([playerSwitch], lambda: [0])
# (Line 10) var bossSwitch = 0; //0 Off, 1 On
bossSwitch = EUDCreateVariables(1)
_IGVA([bossSwitch], lambda: [0])
# (Line 11) var stage = 6;
stage = EUDCreateVariables(1)
_IGVA([stage], lambda: [6])
# (Line 13) var playerNum = 0;
playerNum = EUDCreateVariables(1)
_IGVA([playerNum], lambda: [0])
# (Line 15) const addHp = [0, 150, 300, 450, 600, 750];
addHp = _CGFW(lambda: [_ARR(FlattenList([0, 150, 300, 450, 600, 750]))], 1)[0]
# (Line 16) const loc = [$L("P1"), $L("P2"), $L("P3"), $L("P4"), $L("P5"), $L("P6")];
loc = _CGFW(lambda: [_ARR(FlattenList([GetLocationIndex("P1"), GetLocationIndex("P2"), GetLocationIndex("P3"), GetLocationIndex("P4"), GetLocationIndex("P5"), GetLocationIndex("P6")]))], 1)[0]
# (Line 17) const outerLoc = [$L("Outer1"), $L("Outer2"), $L("Outer3"), $L("Outer4")];
outerLoc = _CGFW(lambda: [_ARR(FlattenList([GetLocationIndex("Outer1"), GetLocationIndex("Outer2"), GetLocationIndex("Outer3"), GetLocationIndex("Outer4")]))], 1)[0]
# (Line 19) const Invulnerability_Time = PVariable();
Invulnerability_Time = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 20) const Invulnerability_Switch = PVariable();
Invulnerability_Switch = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 21) const Invulnerability_Skill_Switch = PVariable();
Invulnerability_Skill_Switch = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 23) const prize = [$L("61"), $L("62"), $L("31"), $L("32"), $L("11")];
prize = _CGFW(lambda: [_ARR(FlattenList([GetLocationIndex("61"), GetLocationIndex("62"), GetLocationIndex("31"), GetLocationIndex("32"), GetLocationIndex("11")]))], 1)[0]
# (Line 26) function SetNextUnitPTR(){
@EUDFunc
def SetNextUnitPTR():
    # (Line 27) return dwread_epd(EPD(0x628438));
    EUDReturn(f_dwread_epd(EPD(0x628438)))
    # (Line 28) }
    # (Line 30) function SetNextUnitEPD(){

@EUDFunc
def SetNextUnitEPD():
    # (Line 31) return epdread_epd(EPD(0x628438));
    EUDReturn(f_epdread_epd(EPD(0x628438)))
    # (Line 32) }
    # (Line 34) function SetNextUnitPtrEpd(){

@EUDFunc
def SetNextUnitPtrEpd():
    # (Line 35) return cunitepdread_epd(EPD(0x628438));
    EUDReturn(f_cunitepdread_epd(EPD(0x628438)))
    # (Line 36) }
    # (Line 40) function playerCheck() {

@EUDFunc
def f_playerCheck():
    # (Line 41) playerNum = 0;
    playerNum << (0)
    # (Line 42) foreach(ptr, epd : EUDLoopUnit2()) {
    for ptr, epd in EUDLoopUnit2():
        # (Line 43) if(MemoryXEPD(epd + 0x64/4, Exactly, 120, 0xFFFF)) {
        if EUDIf()(MemoryXEPD(epd + 0x64 // 4, Exactly, 120, 0xFFFF)):
            # (Line 44) playerNum++;
            playerNum.__iadd__(1)
            # (Line 45) }
            # (Line 46) }
        EUDEndIf()
        # (Line 47) }

    # (Line 49) function set_vulHP() {

@EUDFunc
def f_set_vulHP():
    # (Line 50) if(2 <= playerNum && playerNum <=3) {
    if EUDIf()(EUDSCAnd()(2 <= playerNum)(playerNum <= 3)()):
        # (Line 51) dwwrite(0x65FD00 + 9808 + 19 * 4, 32000);//19번 체력 125로 설정
        f_dwwrite(0x65FD00 + 9808 + 19 * 4, 32000)
        # (Line 52) }
        # (Line 53) if(4 <= playerNum) {
    EUDEndIf()
    if EUDIf()(4 <= playerNum):
        # (Line 54) dwwrite(0x65FD00 + 9808 + 19 * 4, 25600);//19번 체력 100으로 설정
        f_dwwrite(0x65FD00 + 9808 + 19 * 4, 25600)
        # (Line 55) }
        # (Line 56) }
    EUDEndIf()
    # (Line 58) function cur_Stage() {

@EUDFunc
def f_cur_Stage():
    # (Line 59) return stage;
    EUDReturn(stage)
    # (Line 60) }
    # (Line 62) function set_Stage(num) {

@EUDFunc
def f_set_Stage(num):
    # (Line 63) stage = num;
    stage << (num)
    # (Line 64) }
    # (Line 66) function cur_bSwitch() {

@EUDFunc
def f_cur_bSwitch():
    # (Line 67) return bossSwitch;
    EUDReturn(bossSwitch)
    # (Line 68) }
    # (Line 70) function set_bSwitch(num) {

@EUDFunc
def f_set_bSwitch(num):
    # (Line 71) bossSwitch = num;
    bossSwitch << (num)
    # (Line 72) }
    # (Line 74) function set_pSwitch(num) {

@EUDFunc
def f_set_pSwitch(num):
    # (Line 75) playerSwitch = num;
    playerSwitch << (num)
    # (Line 76) }
    # (Line 78) function set_bossHP(unit) {

@EUDFunc
def f_set_bossHP(unit):
    # (Line 79) dwwrite(0x65FD00 + 9808 + unit * 4, dwread(0x65FD00 + 9808 + unit * 4) + addHp[playerNum - 1] * 256);
    f_dwwrite(0x65FD00 + 9808 + unit * 4, f_dwread(0x65FD00 + 9808 + unit * 4) + addHp[playerNum - 1] * 256)
    # (Line 80) }
    # (Line 82) function bossHP_init() {

@EUDFunc
def f_bossHP_init():
    # (Line 83) set_bossHP(15);
    f_set_bossHP(15)
    # (Line 84) set_bossHP(16);
    f_set_bossHP(16)
    # (Line 85) set_bossHP(48);
    f_set_bossHP(48)
    # (Line 86) set_bossHP(58);
    f_set_bossHP(58)
    # (Line 87) set_bossHP(68);
    f_set_bossHP(68)
    # (Line 88) set_bossHP(51);
    f_set_bossHP(51)
    # (Line 89) set_bossHP(79);
    f_set_bossHP(79)
    # (Line 90) for(var i = 0; i < 5; i++) {
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 5, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 91) CreateUnit(1, 215 + i, prize[i], 7);
        # (Line 92) }
        DoActions(CreateUnit(1, 215 + i, prize[i], 7))
        # (Line 93) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 95) const playerEPD = PVariable();

playerEPD = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 97) function playerRevive() {
@EUDFunc
def f_playerRevive():
    # (Line 98) if(playerSwitch == 0) {
    if EUDIf()(playerSwitch == 0):
        # (Line 99) foreach(cp : EUDLoopPlayer("Human")) {
        for cp in EUDLoopPlayer("Human"):
            # (Line 100) playerEPD[cp] = SetNextUnitEPD();
            _ARRW(playerEPD, cp) << (SetNextUnitEPD())
            # (Line 101) CreateUnit(1, 19, "PlayerRevive", cp);
            # (Line 102) }
            DoActions(CreateUnit(1, 19, "PlayerRevive", cp))
            # (Line 103) playerSwitch = 1;

        playerSwitch << (1)
        # (Line 104) }
        # (Line 105) }
    EUDEndIf()
    # (Line 107) function playerLimiter() {

@EUDFunc
def f_playerLimiter():
    # (Line 108) if(Bring(Force1, AtLeast, 3, 19, "Field")) {
    if EUDIf()(Bring(Force1, AtLeast, 3, 19, "Field")):
        # (Line 109) foreach(cp : EUDLoopPlayer("Human")) {
        for cp in EUDLoopPlayer("Human"):
            # (Line 110) setcurpl(cp);
            f_setcurpl(cp)
            # (Line 111) for(var i = 0; i < 4; i++) {
            i = EUDVariable()
            i << (0)
            if EUDWhile()(i >= 4, neg=True):
                def _t3():
                    i.__iadd__(1)
                # (Line 112) if(Bring(cp, Exactly, 1, 19, outerLoc[i])) {
                if EUDIf()(Bring(cp, Exactly, 1, 19, outerLoc[i])):
                    # (Line 113) MoveUnit(1, 19, cp, outerLoc[i], "PlayerRevive");
                    # (Line 114) s.printAt(6, "\x13\x1F[  \x04알    림  \x1F]\n\n\x13\x04최대 \x07두 명\x04까지 \x08입장 \x03가능\x04합니다.");
                    DoActions(MoveUnit(1, 19, cp, outerLoc[i], "PlayerRevive"))
                    s.printAt(6, "\x13\x1F[  \x04알    림  \x1F]\n\n\x13\x04최대 \x07두 명\x04까지 \x08입장 \x03가능\x04합니다.")
                    # (Line 115) }
                    # (Line 116) }
                EUDEndIf()
                # (Line 117) }
                EUDSetContinuePoint()
                _t3()
            EUDEndWhile()
            # (Line 118) }

        # (Line 119) }
    EUDEndIf()
    # (Line 121) const playerBlock = PVariable();

playerBlock = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 122) const playerBlockTime = PVariable();
playerBlockTime = _CGFW(lambda: [PVariable()], 1)[0]
# (Line 124) function playerBlockAction(cp);
# (Line 125) function playerBlockade() {
@EUDFunc
def f_playerBlockade():
    # (Line 126) foreach(cp : EUDLoopPlayer("Human")) {
    for cp in EUDLoopPlayer("Human"):
        # (Line 127) setcurpl(cp);
        f_setcurpl(cp)
        # (Line 128) if(Bring(cp, Exactly, 1, 19, "Field") && playerBlock[cp] == 0) {
        if EUDIf()(EUDSCAnd()(Bring(cp, Exactly, 1, 19, "Field"))(playerBlock[cp] == 0)()):
            # (Line 129) playerBlockTime[cp] = 960;
            _ARRW(playerBlockTime, cp) << (960)
            # (Line 130) playerBlock[cp] = 1;
            _ARRW(playerBlock, cp) << (1)
            # (Line 131) }
            # (Line 132) if(playerBlock[cp] == 1) {
        EUDEndIf()
        if EUDIf()(playerBlock[cp] == 1):
            # (Line 133) if(0 < playerBlockTime[cp]) {
            if EUDIf()(0 >= playerBlockTime[cp], neg=True):
                # (Line 134) if(playerBlockTime[cp] < 940) {
                if EUDIf()(playerBlockTime[cp] >= 940, neg=True):
                    # (Line 135) playerBlockAction(cp);
                    f_playerBlockAction(cp)
                    # (Line 136) }
                    # (Line 137) playerBlockTime[cp]--;
                EUDEndIf()
                _ARRW(playerBlockTime, cp).__isub__(1)
                # (Line 138) }
                # (Line 139) }
            EUDEndIf()
            # (Line 140) if(!Bring(cp, Exactly, 1, 19, "Field") && playerBlock[cp] == 1) {
        EUDEndIf()
        if EUDIf()(EUDSCAnd()(Bring(cp, Exactly, 1, 19, "Field"), neg=True)(playerBlock[cp] == 1)()):
            # (Line 141) playerBlockTime[cp] = 0;
            _ARRW(playerBlockTime, cp) << (0)
            # (Line 142) playerBlock[cp] = 0;
            _ARRW(playerBlock, cp) << (0)
            # (Line 143) }
            # (Line 144) if(playerBlockTime[cp] == 1) {
        EUDEndIf()
        if EUDIf()(playerBlockTime[cp] == 1):
            # (Line 145) s.printAt(6, "\x13\x1F[  \x04알    림  \x1F]\n\n\x13\x04다시 \x07밖으로 \x04나갈 수 \x03있습니다.");
            s.printAt(6, "\x13\x1F[  \x04알    림  \x1F]\n\n\x13\x04다시 \x07밖으로 \x04나갈 수 \x03있습니다.")
            # (Line 146) }
            # (Line 147) }
        EUDEndIf()
        # (Line 148) }

    # (Line 150) function playerBlockAction(cp) {

@EUDFunc
def f_playerBlockAction(cp):
    # (Line 151) if(Bring(cp, Exactly, 1, 19, outerLoc[0])) {
    if EUDIf()(Bring(cp, Exactly, 1, 19, outerLoc[0])):
        # (Line 152) addloc(loc[cp], 0, 16);
        f_addloc(loc[cp], 0, 16)
        # (Line 153) MoveUnit(1, 19, cp, "Anywhere", loc[cp]);
        # (Line 154) s.printAt(6, "\x13\x1F[  \x04알    림  \x1F]\n\n\x13\x04진입 후 \x0720초\x04간은 나갈 수 \x08없습니다.");
        DoActions(MoveUnit(1, 19, cp, "Anywhere", loc[cp]))
        s.printAt(6, "\x13\x1F[  \x04알    림  \x1F]\n\n\x13\x04진입 후 \x0720초\x04간은 나갈 수 \x08없습니다.")
        # (Line 155) }
        # (Line 156) if(Bring(cp, Exactly, 1, 19, outerLoc[1])) {
    EUDEndIf()
    if EUDIf()(Bring(cp, Exactly, 1, 19, outerLoc[1])):
        # (Line 157) addloc(loc[cp], 16, 0);
        f_addloc(loc[cp], 16, 0)
        # (Line 158) MoveUnit(1, 19, cp, "Anywhere", loc[cp]);
        # (Line 159) s.printAt(6, "\x13\x1F[  \x04알    림  \x1F]\n\n\x13\x04진입 후 \x0720초\x04간은 나갈 수 \x08없습니다.");
        DoActions(MoveUnit(1, 19, cp, "Anywhere", loc[cp]))
        s.printAt(6, "\x13\x1F[  \x04알    림  \x1F]\n\n\x13\x04진입 후 \x0720초\x04간은 나갈 수 \x08없습니다.")
        # (Line 160) }
        # (Line 161) if(Bring(cp, Exactly, 1, 19, outerLoc[2])) {
    EUDEndIf()
    if EUDIf()(Bring(cp, Exactly, 1, 19, outerLoc[2])):
        # (Line 162) addloc(loc[cp], 0, -16);
        f_addloc(loc[cp], 0, -16)
        # (Line 163) MoveUnit(1, 19, cp, "Anywhere", loc[cp]);
        # (Line 164) s.printAt(6, "\x13\x1F[  \x04알    림  \x1F]\n\n\x13\x04진입 후 \x0720초\x04간은 나갈 수 \x08없습니다.");
        DoActions(MoveUnit(1, 19, cp, "Anywhere", loc[cp]))
        s.printAt(6, "\x13\x1F[  \x04알    림  \x1F]\n\n\x13\x04진입 후 \x0720초\x04간은 나갈 수 \x08없습니다.")
        # (Line 165) }
        # (Line 166) if(Bring(cp, Exactly, 1, 19, outerLoc[3])) {
    EUDEndIf()
    if EUDIf()(Bring(cp, Exactly, 1, 19, outerLoc[3])):
        # (Line 167) addloc(loc[cp], -16, 0);
        f_addloc(loc[cp], -16, 0)
        # (Line 168) MoveUnit(1, 19, cp, "Anywhere", loc[cp]);
        # (Line 169) s.printAt(6, "\x13\x1F[  \x04알    림  \x1F]\n\n\x13\x04진입 후 \x0720초\x04간은 나갈 수 \x08없습니다.");
        DoActions(MoveUnit(1, 19, cp, "Anywhere", loc[cp]))
        s.printAt(6, "\x13\x1F[  \x04알    림  \x1F]\n\n\x13\x04진입 후 \x0720초\x04간은 나갈 수 \x08없습니다.")
        # (Line 170) }
        # (Line 171) }
    EUDEndIf()
    # (Line 173) function playerBlockInit() {

@EUDFunc
def f_playerBlockInit():
    # (Line 174) foreach(cp : EUDLoopPlayer("Human")) {
    for cp in EUDLoopPlayer("Human"):
        # (Line 175) setcurpl(cp);
        f_setcurpl(cp)
        # (Line 176) playerBlock[cp] = 0;
        _ARRW(playerBlock, cp) << (0)
        # (Line 177) playerBlockTime[cp] = 0;
        _ARRW(playerBlockTime, cp) << (0)
        # (Line 178) }
        # (Line 179) }

    # (Line 181) function defeatCheck() {

@EUDFunc
def f_defeatCheck():
    # (Line 182) if(stage > 0 && playerSwitch == 1 && Command(Force1, Exactly, 0, 19)) {
    if EUDIf()(EUDSCAnd()(stage <= 0, neg=True)(playerSwitch == 1)(Command(Force1, Exactly, 0, 19))()):
        # (Line 183) foreach(cp : EUDLoopPlayer()) {
        for cp in EUDLoopPlayer():
            # (Line 184) setcurpl(cp);
            f_setcurpl(cp)
            # (Line 185) Defeat();
            # (Line 186) }
            DoActions(Defeat())
            # (Line 187) }

        # (Line 188) foreach(cp : EUDLoopPlayer("Human")) {
    EUDEndIf()
    for cp in EUDLoopPlayer("Human"):
        # (Line 189) setcurpl(cp);
        f_setcurpl(cp)
        # (Line 190) if(Deaths(cp, Exactly, 1, 37)) {
        if EUDIf()(Deaths(cp, Exactly, 1, 37)):
            # (Line 191) s.printAt(6, "\x13\x04밴 당하셨습니다");
            s.printAt(6, "\x13\x04밴 당하셨습니다")
            # (Line 192) Defeat();
            # (Line 193) }
            DoActions(Defeat())
            # (Line 194) }
        EUDEndIf()
        # (Line 195) }

    # (Line 197) function SingleBan(){

@EUDFunc
def SingleBan():
    # (Line 198) const a = 0x6D0F48; //방이름
    a = 0x6D0F48
    # (Line 199) const b = 0x6D0F78; //방장닉
    b = 0x6D0F78
    # (Line 200) const c = Db("");
    c = Db("")
    # (Line 201) if(strcmp(a, b) == 0){
    if EUDIf()(f_strcmp(a, b) == 0):
        # (Line 202) foreach(cp : EUDLoopPlayer('Human', None, None)){
        for cp in EUDLoopPlayer('Human', None, None):
            # (Line 203) setcurpl(cp);
            f_setcurpl(cp)
            # (Line 204) s.print("\x13\x1EUDP 플레이는 금지하고 있습니다.\n\x13\x04만약 방제가 방장닉네임일 경우 플레이가 불가능하니 다른 방제로 설정해주세요.");
            s.print("\x13\x1EUDP 플레이는 금지하고 있습니다.\n\x13\x04만약 방제가 방장닉네임일 경우 플레이가 불가능하니 다른 방제로 설정해주세요.")
            # (Line 205) Defeat();
            # (Line 206) }
            DoActions(Defeat())
            # (Line 207) }

        # (Line 208) else if(strcmp(b, c) == 0){
    if EUDElseIf()(f_strcmp(b, c) == 0):
        # (Line 209) foreach(cp : EUDLoopPlayer('Human', None, None)){
        for cp in EUDLoopPlayer('Human', None, None):
            # (Line 210) setcurpl(cp);
            f_setcurpl(cp)
            # (Line 211) s.print("\x13\x1E싱글 플레이는 금지하고 있습니다.");
            s.print("\x13\x1E싱글 플레이는 금지하고 있습니다.")
            # (Line 212) Defeat();
            # (Line 213) }
            DoActions(Defeat())
            # (Line 214) }

        # (Line 215) }
    EUDEndIf()
    # (Line 217) function SpeedBan(){

@EUDFunc
def SpeedBan():
    # (Line 218) const a = dwread_epd_safe(EPD(0x51CE84));
    a = f_dwread_epd_safe(EPD(0x51CE84))
    # (Line 219) const b = dwread_epd_safe(EPD(0x51CE88));
    b = f_dwread_epd_safe(EPD(0x51CE88))
    # (Line 220) if(a == 1000){if(b == 1000) return;}		//턴레이트24
    if EUDIf()(a == 1000):
        if EUDIf()(b == 1000):
            EUDReturn()
        EUDEndIf()
        # (Line 221) else if(a == 1042){if(b == 1190) return;}	//턴레이트20
    if EUDElseIf()(a == 1042):
        if EUDIf()(b == 1190):
            EUDReturn()
        EUDEndIf()
        # (Line 222) else if(a == 1302){if(b == 1488) return;}	//턴레이트16
    if EUDElseIf()(a == 1302):
        if EUDIf()(b == 1488):
            EUDReturn()
        EUDEndIf()
        # (Line 223) else if(a == 1488){if(b == 1701) return;}	//턴레이트14
    if EUDElseIf()(a == 1488):
        if EUDIf()(b == 1701):
            EUDReturn()
        EUDEndIf()
        # (Line 224) else if(a == 1736){if(b == 1984) return;}	//턴레이트12
    if EUDElseIf()(a == 1736):
        if EUDIf()(b == 1984):
            EUDReturn()
        EUDEndIf()
        # (Line 225) else if(a == 2083){if(b == 2381) return;}	//턴레이트10
    if EUDElseIf()(a == 2083):
        if EUDIf()(b == 2381):
            EUDReturn()
        EUDEndIf()
        # (Line 226) else if(a == 2604){if(b == 2976) return;}	//턴레이트8
    if EUDElseIf()(a == 2604):
        if EUDIf()(b == 2976):
            EUDReturn()
        EUDEndIf()
        # (Line 227) else{
    if EUDElse()():
        # (Line 228) foreach(cp : EUDLoopPlayer('Human', None, None)){
        for cp in EUDLoopPlayer('Human', None, None):
            # (Line 229) setcurpl(cp);
            f_setcurpl(cp)
            # (Line 230) s.print("\x13\x1E배속 플레이는 금지하고 있습니다.");
            s.print("\x13\x1E배속 플레이는 금지하고 있습니다.")
            # (Line 231) Defeat();
            # (Line 232) }
            DoActions(Defeat())
            # (Line 233) }

        # (Line 234) }
    EUDEndIf()
    # (Line 236) function printBossHP(epd) {

@EUDFunc
def f_printBossHP(epd):
    # (Line 237) var currentUnitNum = wread_epd(epd + 0x64/4, 0);
    currentUnitNum = EUDVariable()
    currentUnitNum << (f_wread_epd(epd + 0x64 // 4, 0))
    # (Line 238) var currentUnitHP = dwread_epd(epd + 0x8/4) / 256;
    currentUnitHP = EUDVariable()
    currentUnitHP << (f_dwread_epd(epd + 0x8 // 4) // 256)
    # (Line 239) var currentUnitMaxHP = dwread(0x65FD00 + 9808 + currentUnitNum * 4) /256;
    currentUnitMaxHP = EUDVariable()
    currentUnitMaxHP << (f_dwread(0x65FD00 + 9808 + currentUnitNum * 4) // 256)
    # (Line 240) foreach(cp : EUDLoopPlayer("Human")) {
    for cp in EUDLoopPlayer("Human"):
        # (Line 241) setcurpl(cp);
        f_setcurpl(cp)
        # (Line 242) eprintln("\x04현재 \x07보스 \x08체력\x04: " , currentUnitHP, " / ", currentUnitMaxHP);
        f_eprintln("\x04현재 \x07보스 \x08체력\x04: ", currentUnitHP, " / ", currentUnitMaxHP)
        # (Line 243) }
        # (Line 244) }

    # (Line 247) function timeFlow() {

@EUDFunc
def f_timeFlow():
    # (Line 248) bulletTime++;
    bulletTime.__iadd__(1)
    # (Line 249) }
    # (Line 251) function bulletTimer(time) {

@EUDFunc
def f_bulletTimer(time):
    # (Line 252) if(bulletTime % time == 0) {
    if EUDIf()(bulletTime % time == 0):
        # (Line 253) return True;
        EUDReturn(True)
        # (Line 254) }
        # (Line 255) return False;
    EUDEndIf()
    EUDReturn(False)
    # (Line 256) }
    # (Line 258) function bulletRemover() {

@EUDFunc
def f_bulletRemover():
    # (Line 259) for(var i = 6; i < 8; i++) {
    i = EUDVariable()
    i << (6)
    if EUDWhile()(i >= 8, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 260) RemoveUnitAt(All, "(buildings)", "Outer1", i);
        # (Line 261) RemoveUnitAt(All, "(buildings)", "Outer2", i);
        DoActions(RemoveUnitAt(All, "(buildings)", "Outer1", i))
        # (Line 262) RemoveUnitAt(All, "(buildings)", "Outer3", i);
        DoActions(RemoveUnitAt(All, "(buildings)", "Outer2", i))
        # (Line 263) RemoveUnitAt(All, "(buildings)", "Outer4", i);
        DoActions(RemoveUnitAt(All, "(buildings)", "Outer3", i))
        # (Line 264) }
        DoActions(RemoveUnitAt(All, "(buildings)", "Outer4", i))
        # (Line 265) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 267) function bulletReflector() {

@EUDFunc
def f_bulletReflector():
    # (Line 268) for(var i = 0; i < 4; i++) {
    i = EUDVariable()
    i << (0)
    if EUDWhile()(i >= 4, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 269) GiveUnits(All, 195, 7, outerLoc[i], 6);
        # (Line 270) Order(195, 6, outerLoc[i], Move, bossLoc);
        DoActions(GiveUnits(All, 195, 7, outerLoc[i], 6))
        # (Line 271) Order(199, 6, outerLoc[i], Move, bossLoc);
        DoActions(Order(195, 6, outerLoc[i], Move, bossLoc))
        # (Line 272) }
        DoActions(Order(199, 6, outerLoc[i], Move, bossLoc))
        # (Line 273) RemoveUnitAt(All, 195, bossLoc, 6);
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 274) RemoveUnitAt(All, 199, bossLoc, 6);
    DoActions(RemoveUnitAt(All, 195, bossLoc, 6))
    # (Line 275) }
    DoActions(RemoveUnitAt(All, 199, bossLoc, 6))
    # (Line 277) function bulletInit() {

@EUDFunc
def f_bulletInit():
    # (Line 278) for(var i = 6; i < 8; i++) {
    i = EUDVariable()
    i << (6)
    if EUDWhile()(i >= 8, neg=True):
        def _t2():
            i.__iadd__(1)
        # (Line 279) RemoveUnitAt(All, "(buildings)", "Field", i);
        # (Line 280) }
        DoActions(RemoveUnitAt(All, "(buildings)", "Field", i))
        # (Line 281) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 283) function SetMissileDir(currentMissile, angle) {

@EUDFunc
def SetMissileDir(currentMissile, angle):
    # (Line 284) bwrite_epd(currentMissile + 0x21/4, 1, angle);
    f_bwrite_epd(currentMissile + 0x21 // 4, 1, angle)
    # (Line 285) bwrite_epd(currentMissile + 0x23/4, 3, angle);
    f_bwrite_epd(currentMissile + 0x23 // 4, 3, angle)
    # (Line 286) }
    # (Line 288) function bulletStrike(BulletPlayer, BulletUnit, HitPoint, cp, EffectUnit) {

@EUDFunc
def f_bulletStrike(BulletPlayer, BulletUnit, HitPoint, cp, EffectUnit):
    # (Line 289) if(Bring(BulletPlayer, AtLeast, 1, BulletUnit, loc[cp])) {
    if EUDIf()(Bring(BulletPlayer, AtLeast, 1, BulletUnit, loc[cp])):
        # (Line 290) foreach(ptr, epd : ul.LoopPUnit(cp)) {
        for ptr, epd in ul.LoopPUnit(cp):
            # (Line 291) if (MemoryXEPD(epd + 0x64/4, Exactly, 19, 0xFFFF) && Invulnerability_Skill_Switch[cp] == 0) {
            if EUDIf()(EUDSCAnd()(MemoryXEPD(epd + 0x64 // 4, Exactly, 19, 0xFFFF))(Invulnerability_Skill_Switch[cp] == 0)()):
                # (Line 292) SetMemoryEPD(epd + 0x8/4, Subtract, HitPoint * 256);
                # (Line 293) if(MemoryEPD(epd + 0x8/4, Exactly, 0)) {
                DoActions(SetMemoryEPD(epd + 0x8 // 4, Subtract, HitPoint * 256))
                if EUDIf()(MemoryEPD(epd + 0x8 // 4, Exactly, 0)):
                    # (Line 294) KillUnitAt(All, 19, loc[cp], cp);
                    # (Line 295) }
                    DoActions(KillUnitAt(All, 19, loc[cp], cp))
                    # (Line 296) }
                EUDEndIf()
                # (Line 297) }
            EUDEndIf()
            # (Line 298) CreateUnit(1, EffectUnit, loc[cp], cp);

        # (Line 299) KillUnitAt(1, EffectUnit, "Anywhere", cp);
        DoActions(CreateUnit(1, EffectUnit, loc[cp], cp))
        # (Line 300) KillUnitAt(1, BulletUnit, loc[cp], BulletPlayer);
        DoActions(KillUnitAt(1, EffectUnit, "Anywhere", cp))
        # (Line 301) }
        DoActions(KillUnitAt(1, BulletUnit, loc[cp], BulletPlayer))
        # (Line 302) }
    EUDEndIf()
    # (Line 304) function dotDeal(HP, cp) {

@EUDFunc
def f_dotDeal(HP, cp):
    # (Line 305) foreach(ptr, epd : ul.LoopPUnit(cp)) {
    for ptr, epd in ul.LoopPUnit(cp):
        # (Line 306) if (MemoryXEPD(epd + 0x64/4, Exactly, 19, 0xFFFF) && Invulnerability_Skill_Switch[cp] == 0) {
        if EUDIf()(EUDSCAnd()(MemoryXEPD(epd + 0x64 // 4, Exactly, 19, 0xFFFF))(Invulnerability_Skill_Switch[cp] == 0)()):
            # (Line 307) SetMemoryEPD(epd + 0x8/4, Subtract, HP * 256);
            # (Line 308) if(MemoryEPD(epd + 0x8/4, Exactly, 0)) {
            DoActions(SetMemoryEPD(epd + 0x8 // 4, Subtract, HP * 256))
            if EUDIf()(MemoryEPD(epd + 0x8 // 4, Exactly, 0)):
                # (Line 309) KillUnit(19, cp);
                # (Line 310) }
                DoActions(KillUnit(19, cp))
                # (Line 311) }
            EUDEndIf()
            # (Line 312) }
        EUDEndIf()
        # (Line 313) }

    # (Line 315) const leaveLoc = [$L("100"), $L("101"), $L("102"), $L("103")];

leaveLoc = _CGFW(lambda: [_ARR(FlattenList([GetLocationIndex("100"), GetLocationIndex("101"), GetLocationIndex("102"), GetLocationIndex("103")]))], 1)[0]
# (Line 317) function dontLeave() {
@EUDFunc
def f_dontLeave():
    # (Line 318) foreach(cp : EUDLoopPlayer("Human")) {
    for cp in EUDLoopPlayer("Human"):
        # (Line 319) setcurpl(cp);
        f_setcurpl(cp)
        # (Line 320) for(var i = 0; i < 4; i++) {
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i >= 4, neg=True):
            def _t2():
                i.__iadd__(1)
            # (Line 321) if(Bring(cp, Exactly, 1, 19, leaveLoc[i])) {
            if EUDIf()(Bring(cp, Exactly, 1, 19, leaveLoc[i])):
                # (Line 322) MoveUnit(1, 19, cp, leaveLoc[i], "PlayerRevive");
                # (Line 323) s.printAt(6, "\x13\x1F[  \x04알    림  \x1F]\n\n\x13\x03밖\x04으로 나가실 수 \x08없습니다");
                DoActions(MoveUnit(1, 19, cp, leaveLoc[i], "PlayerRevive"))
                s.printAt(6, "\x13\x1F[  \x04알    림  \x1F]\n\n\x13\x03밖\x04으로 나가실 수 \x08없습니다")
                # (Line 324) }
                # (Line 325) }
            EUDEndIf()
            # (Line 326) }
            EUDSetContinuePoint()
            _t2()
        EUDEndWhile()
        # (Line 327) }

    # (Line 330) function moveLoc() {

@EUDFunc
def f_moveLoc():
    # (Line 331) foreach(cp : EUDLoopPlayer("Human")) {
    for cp in EUDLoopPlayer("Human"):
        # (Line 332) setcurpl(cp);
        f_setcurpl(cp)
        # (Line 333) if(Command(cp, Exactly, 0, 19) && playerSwitch == 1) {
        if EUDIf()(EUDSCAnd()(Command(cp, Exactly, 0, 19))(playerSwitch == 1)()):
            # (Line 334) MoveLocation(loc[cp], 120, cp, "Anywhere");
            # (Line 335) } else {
            DoActions(MoveLocation(loc[cp], 120, cp, "Anywhere"))
        if EUDElse()():
            # (Line 336) MoveLocation(loc[cp], 19, cp, "Anywhere");
            # (Line 337) }
            DoActions(MoveLocation(loc[cp], 19, cp, "Anywhere"))
            # (Line 338) foreach(ptr, epd : ul.LoopPUnit(cp)) {
        EUDEndIf()
        for ptr, epd in ul.LoopPUnit(cp):
            # (Line 339) if (MemoryXEPD(epd + 0x64/4, Exactly, 19, 0xFFFF)) {
            if EUDIf()(MemoryXEPD(epd + 0x64 // 4, Exactly, 19, 0xFFFF)):
                # (Line 340) SetMemoryEPD(epd + 0x60/4, SetTo, 100 * 256);
                # (Line 341) }
                DoActions(SetMemoryEPD(epd + 0x60 // 4, SetTo, 100 * 256))
                # (Line 342) }
            EUDEndIf()
            # (Line 343) }

        # (Line 344) }

    # (Line 346) const bulletDam = [20, 20, 15, 25, 25, 10];

bulletDam = _CGFW(lambda: [_ARR(FlattenList([20, 20, 15, 25, 25, 10]))], 1)[0]
# (Line 348) function setBulletDam(bulletNum, damage) {
@EUDFunc
def f_setBulletDam(bulletNum, damage):
    # (Line 349) bulletDam[bulletNum] = damage;
    _ARRW(bulletDam, bulletNum) << (damage)
    # (Line 350) }
    # (Line 352) function actionLoc() {

@EUDFunc
def f_actionLoc():
    # (Line 353) foreach(cp : EUDLoopPlayer("Human")) {
    for cp in EUDLoopPlayer("Human"):
        # (Line 354) setcurpl(cp);
        f_setcurpl(cp)
        # (Line 355) for(var i = 6; i < 8; i++) {
        i = EUDVariable()
        i << (6)
        if EUDWhile()(i >= 8, neg=True):
            def _t2():
                i.__iadd__(1)
            # (Line 356) for(var j = 0; j < 6; j++) {
            j = EUDVariable()
            j << (0)
            if EUDWhile()(j >= 6, neg=True):
                def _t4():
                    j.__iadd__(1)
                # (Line 357) bulletStrike(i, 194 + j, bulletDam[j], cp, 21);
                f_bulletStrike(i, 194 + j, bulletDam[j], cp, 21)
                # (Line 358) }
                # (Line 359) }
                EUDSetContinuePoint()
                _t4()
            EUDEndWhile()
            # (Line 360) bulletStrike(7, 90, 3, cp, 103);
            EUDSetContinuePoint()
            _t2()
        EUDEndWhile()
        f_bulletStrike(7, 90, 3, cp, 103)
        # (Line 361) }
        # (Line 362) }

    # (Line 364) function lockdown() {

@EUDFunc
def f_lockdown():
    # (Line 365) foreach(cp : EUDLoopPlayer("Human")) {
    for cp in EUDLoopPlayer("Human"):
        # (Line 366) setcurpl(cp);
        f_setcurpl(cp)
        # (Line 367) if(MemoryXEPD(playerEPD[cp] + 0x117/4, AtLeast, 0x6000000, 0xFF000000)) {
        if EUDIf()(MemoryXEPD(playerEPD[cp] + 0x117 // 4, AtLeast, 0x6000000, 0xFF000000)):
            # (Line 368) SetMemoryXEPD(playerEPD[cp] + 0x117/4, SetTo, 0x6000000, 0xFF000000);
            # (Line 369) }
            DoActions(SetMemoryXEPD(playerEPD[cp] + 0x117 // 4, SetTo, 0x6000000, 0xFF000000))
            # (Line 370) }
        EUDEndIf()
        # (Line 371) }

    # (Line 375) function button_Invulnerability() {

@EUDFunc
def f_button_Invulnerability():
    # (Line 376) foreach(cp : EUDLoopPlayer("Human")) {
    for cp in EUDLoopPlayer("Human"):
        # (Line 377) setcurpl(cp);
        f_setcurpl(cp)
        # (Line 378) if(Command(cp, AtLeast, 1, 19) && tt.BuildCheckEPD(playerEPD[cp], 89)) {
        if EUDIf()(EUDSCAnd()(Command(cp, AtLeast, 1, 19))(tt.BuildCheckEPD(playerEPD[cp], 89))()):
            # (Line 379) tt.BuildResetEPD(playerEPD[cp]);
            tt.BuildResetEPD(playerEPD[cp])
            # (Line 380) if(Invulnerability_Switch[cp] == 0) {
            if EUDIf()(Invulnerability_Switch[cp] == 0):
                # (Line 381) Invulnerability_Time[cp] = 960;
                _ARRW(Invulnerability_Time, cp) << (960)
                # (Line 382) Invulnerability_Switch[cp] = 1;
                _ARRW(Invulnerability_Switch, cp) << (1)
                # (Line 383) Invulnerability_Skill_Switch[cp] = 1;
                _ARRW(Invulnerability_Skill_Switch, cp) << (1)
                # (Line 384) SetInvincibility(Enable, 19, cp, "Anywhere");
                # (Line 385) } else {
                DoActions(SetInvincibility(Enable, 19, cp, "Anywhere"))
            if EUDElse()():
                # (Line 386) s.printAt(10, "\x13\x07스킬\x04이 \x08쿨타임 \x04중입니다");
                s.printAt(10, "\x13\x07스킬\x04이 \x08쿨타임 \x04중입니다")
                # (Line 387) }
                # (Line 388) }
            EUDEndIf()
            # (Line 389) }
        EUDEndIf()
        # (Line 390) }

    # (Line 392) function Invulnerability_Timer() {

@EUDFunc
def Invulnerability_Timer():
    # (Line 393) foreach(cp : EUDLoopPlayer("Human")) {
    for cp in EUDLoopPlayer("Human"):
        # (Line 394) setcurpl(cp);
        f_setcurpl(cp)
        # (Line 395) if(Invulnerability_Switch[cp] == 1) {
        if EUDIf()(Invulnerability_Switch[cp] == 1):
            # (Line 396) Invulnerability_Time[cp]--;
            _ARRW(Invulnerability_Time, cp).__isub__(1)
            # (Line 397) }
            # (Line 398) if(Invulnerability_Time[cp] == 922) {
        EUDEndIf()
        if EUDIf()(Invulnerability_Time[cp] == 922):
            # (Line 399) SetInvincibility(Disable, 19, cp, "Anywhere");
            # (Line 400) Invulnerability_Skill_Switch[cp] = 0;
            DoActions(SetInvincibility(Disable, 19, cp, "Anywhere"))
            _ARRW(Invulnerability_Skill_Switch, cp) << (0)
            # (Line 401) }
            # (Line 402) if(Invulnerability_Time[cp] == 0 && Invulnerability_Switch[cp] == 1) {
        EUDEndIf()
        if EUDIf()(EUDSCAnd()(Invulnerability_Time[cp] == 0)(Invulnerability_Switch[cp] == 1)()):
            # (Line 403) Invulnerability_Switch[cp] = 0;
            _ARRW(Invulnerability_Switch, cp) << (0)
            # (Line 404) s.printAt(10,"\x13\x07스킬\x04의 \x08쿨타임\x04이 끝났습니다");
            s.printAt(10, "\x13\x07스킬\x04의 \x08쿨타임\x04이 끝났습니다")
            # (Line 405) }
            # (Line 406) s.printAt(0, "\x12\x07퇴장 \x03쿨타임\x04: ", playerBlockTime[cp] / 48, "초  /  ", "\x12\x07스킬\x03 쿨타임: \x04", Invulnerability_Time[cp] / 48,"초");
        EUDEndIf()
        s.printAt(0, "\x12\x07퇴장 \x03쿨타임\x04: ", playerBlockTime[cp] // 48, "초  /  ", "\x12\x07스킬\x03 쿨타임: \x04", Invulnerability_Time[cp] // 48, "초")
        # (Line 407) }
        # (Line 408) }

    # (Line 410) function skill_Invulnerability() {

@EUDFunc
def f_skill_Invulnerability():
    # (Line 411) foreach(cp : EUDLoopPlayer("Human")) {
    for cp in EUDLoopPlayer("Human"):
        # (Line 412) if(Invulnerability_Skill_Switch[cp] == 1) {
        if EUDIf()(Invulnerability_Skill_Switch[cp] == 1):
            # (Line 413) }
            # (Line 414) }
            pass
        EUDEndIf()
        # (Line 415) }

    # (Line 417) function Invulnerability() {

@EUDFunc
def Invulnerability():
    # (Line 418) button_Invulnerability();
    f_button_Invulnerability()
    # (Line 419) Invulnerability_Timer();
    Invulnerability_Timer()
    # (Line 420) skill_Invulnerability();
    f_skill_Invulnerability()
    # (Line 421) }
    # (Line 424) function PolarLocation(loc: TrgLocation ,length ,angle) {

@EUDTypedFunc([TrgLocation, None, None])
def PolarLocation(loc_1, length, angle):
    # (Line 437) const x, y = lengthdir(length, angle);
    x, y = List2Assignable([f_lengthdir(length, angle)])
    # (Line 438) const locTable = EPD(0x58DC4C) + 5*loc;
    locTable = EPD(0x58DC4C) + 5 * loc_1
    # (Line 439) SetMemoryEPD(locTable + 0, Add, x);
    # (Line 440) SetMemoryEPD(locTable + 2, Add, x);
    DoActions(SetMemoryEPD(locTable + 0, Add, x))
    # (Line 441) SetMemoryEPD(locTable + 1, Add, y);
    DoActions(SetMemoryEPD(locTable + 2, Add, x))
    # (Line 442) SetMemoryEPD(locTable + 3, Add, y);
    DoActions(SetMemoryEPD(locTable + 1, Add, y))
    # (Line 443) }
    DoActions(SetMemoryEPD(locTable + 3, Add, y))
    # (Line 445) function press_Ins(cp) {

@EUDFunc
def f_press_Ins(cp):
    # (Line 446) if(Deaths(cp, Exactly, 1, "Power Generator")) {
    if EUDIf()(Deaths(cp, Exactly, 1, "Power Generator")):
        # (Line 447) return True;
        EUDReturn(True)
        # (Line 448) }
        # (Line 449) return False;
    EUDEndIf()
    EUDReturn(False)
    # (Line 450) }
    # (Line 452) function press_Del(cp) {

@EUDFunc
def f_press_Del(cp):
    # (Line 453) if(Deaths(cp, Exactly, 2, "Power Generator")) {
    if EUDIf()(Deaths(cp, Exactly, 2, "Power Generator")):
        # (Line 454) return True;
        EUDReturn(True)
        # (Line 455) }
        # (Line 456) return False;
    EUDEndIf()
    EUDReturn(False)
    # (Line 457) }
    # (Line 459) function off_bgm(cp) {

@EUDFunc
def f_off_bgm(cp):
    # (Line 460) if(press_Del(cp) == True && bgm.current_switch(cp) == 1) {
    if EUDIf()(EUDSCAnd()(f_press_Del(cp) == True)(bgm.f_current_switch(cp) == 1)()):
        # (Line 461) bgm.set_switch(cp, 0);
        bgm.f_set_switch(cp, 0)
        # (Line 462) return True;
        EUDReturn(True)
        # (Line 463) }
        # (Line 464) return False;
    EUDEndIf()
    EUDReturn(False)
    # (Line 465) }
    # (Line 467) function on_bgm(cp) {

@EUDFunc
def f_on_bgm(cp):
    # (Line 468) if(press_Ins(cp) == True && bgm.current_switch(cp) == 0) {
    if EUDIf()(EUDSCAnd()(f_press_Ins(cp) == True)(bgm.f_current_switch(cp) == 0)()):
        # (Line 469) bgm.set_switch(cp, 1);
        bgm.f_set_switch(cp, 1)
        # (Line 470) bgm.set_length(cp, 0);
        bgm.f_set_length(cp, 0)
        # (Line 471) return True;
        EUDReturn(True)
        # (Line 472) }
        # (Line 473) return False;
    EUDEndIf()
    EUDReturn(False)
    # (Line 474) }
    # (Line 476) function press_Z(cp) {

@EUDFunc
def f_press_Z(cp):
    # (Line 477) if(Deaths(cp, Exactly, 4, "Power Generator")) {
    if EUDIf()(Deaths(cp, Exactly, 4, "Power Generator")):
        # (Line 478) return True;
        EUDReturn(True)
        # (Line 479) }
        # (Line 480) return False;
    EUDEndIf()
    EUDReturn(False)
    # (Line 481) }
    # (Line 483) function press_X(cp) {

@EUDFunc
def f_press_X(cp):
    # (Line 484) if(Deaths(cp, Exactly, 8, "Power Generator")) {
    if EUDIf()(Deaths(cp, Exactly, 8, "Power Generator")):
        # (Line 485) return True;
        EUDReturn(True)
        # (Line 486) }
        # (Line 487) return False;
    EUDEndIf()
    EUDReturn(False)
    # (Line 488) }
