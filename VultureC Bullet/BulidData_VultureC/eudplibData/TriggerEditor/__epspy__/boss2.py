## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import functions as fx;
import functions as fx
# (Line 3) var bossLoc = $L("Boss");
bossLoc = EUDCreateVariables(1)
_IGVA([bossLoc], lambda: [GetLocationIndex("Boss")])
# (Line 4) var boss2EPD;
boss2EPD = EUDVariable()
# (Line 5) var boss2Face;
boss2Face = EUDVariable()
# (Line 6) var boss2AttkCycle;
boss2AttkCycle = EUDVariable()
# (Line 8) const s = StringBuffer(1024);
s = _CGFW(lambda: [StringBuffer(1024)], 1)[0]
# (Line 10) function stage2() {
@EUDFunc
def f_stage2():
    # (Line 11) boss2Face = bread_epd(boss2EPD + 0x21/4, 1);
    boss2Face << (f_bread_epd(boss2EPD + 0x21 // 4, 1))
    # (Line 12) boss2AttkCycle = bread_epd(boss2EPD + 0x55/4, 1);
    boss2AttkCycle << (f_bread_epd(boss2EPD + 0x55 // 4, 1))
    # (Line 14) if(fx.cur_bSwitch() == 0) { //보스 소환
    if EUDIf()(fx.f_cur_bSwitch() == 0):
        # (Line 15) boss2EPD = fx.SetNextUnitEPD();
        boss2EPD << (fx.SetNextUnitEPD())
        # (Line 16) CreateUnit(1, 16, bossLoc, 6);
        # (Line 17) fx.set_bSwitch(1);
        DoActions(CreateUnit(1, 16, bossLoc, 6))
        fx.f_set_bSwitch(1)
        # (Line 18) foreach(cp : EUDLoopPlayer("Human")) {
        for cp in EUDLoopPlayer("Human"):
            # (Line 19) setcurpl(cp);
            f_setcurpl(cp)
            # (Line 20) s.printAt(0, "\n\n\n\n\n\n\n\n\n");
            s.printAt(0, "\n\n\n\n\n\n\n\n\n")
            # (Line 21) s.printAt(2, "\x13\x1E━━━\x02━━━\x04━━ \x1F[ \x08위   험 \x1F]\x04 ━━\x02━━━\x1E━━━\n\n\x13\x07[\x04 Stage \x0F2 \x07]\n\n\x13\x04산탄 \x03사이보그\n\n\x13\x1E━━━\x02━━━━\x04━━━━━━━\x02━━━━\x1E━━━━");
            s.printAt(2, "\x13\x1E━━━\x02━━━\x04━━ \x1F[ \x08위   험 \x1F]\x04 ━━\x02━━━\x1E━━━\n\n\x13\x07[\x04 Stage \x0F2 \x07]\n\n\x13\x04산탄 \x03사이보그\n\n\x13\x1E━━━\x02━━━━\x04━━━━━━━\x02━━━━\x1E━━━━")
            # (Line 22) }
            # (Line 23) }

        # (Line 25) fx.playerRevive(); //플레이어 소환
    EUDEndIf()
    fx.f_playerRevive()
    # (Line 27) fx.printBossHP(boss2EPD);
    fx.f_printBossHP(boss2EPD)
    # (Line 29) if(fx.bulletTimer(48) == True) { //중앙 미사일
    if EUDIf()(fx.f_bulletTimer(48) == True):
        # (Line 30) CreateUnit(7, 194, bossLoc, 7);
        # (Line 31) setcurpl(7);
        DoActions(CreateUnit(7, 194, bossLoc, 7))
        f_setcurpl(7)
        # (Line 32) RunAIScriptAt("JYDg", bossLoc);
        # (Line 33) }
        DoActions(RunAIScriptAt("JYDg", bossLoc))
        # (Line 35) if(boss2AttkCycle == 43) { //보스 공격
    EUDEndIf()
    if EUDIf()(boss2AttkCycle == 43):
        # (Line 36) var currentMissile;
        currentMissile = EUDVariable()
        # (Line 37) const head = [240, 0, 16];
        head = _ARR(FlattenList([240, 0, 16]))
        # (Line 38) for(var i = 0; i < 3; i++) {
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i >= 3, neg=True):
            def _t5():
                i.__iadd__(1)
            # (Line 39) currentMissile = fx.SetNextUnitEPD();
            currentMissile << (fx.SetNextUnitEPD())
            # (Line 40) CreateUnit(1, 197, bossLoc, 6);
            # (Line 41) fx.SetMissileDir(currentMissile, (boss2Face + head[i]) % 256);
            DoActions(CreateUnit(1, 197, bossLoc, 6))
            fx.SetMissileDir(currentMissile, (boss2Face + head[i]) % 256)
            # (Line 42) }
            # (Line 43) Order(197, 6, "Anywhere", Move, "PlayerRevive");
            EUDSetContinuePoint()
            _t5()
        EUDEndWhile()
        # (Line 44) }
        DoActions(Order(197, 6, "Anywhere", Move, "PlayerRevive"))
        # (Line 46) if(Deaths(6, Exactly, 1, 16)) {
    EUDEndIf()
    if EUDIf()(Deaths(6, Exactly, 1, 16)):
        # (Line 47) KillUnit(19, Force1);
        # (Line 48) fx.set_bSwitch(0);
        DoActions(KillUnit(19, Force1))
        fx.f_set_bSwitch(0)
        # (Line 49) fx.set_pSwitch(0);
        fx.f_set_pSwitch(0)
        # (Line 50) fx.set_Stage(3);
        fx.f_set_Stage(3)
        # (Line 51) fx.bulletInit();
        fx.f_bulletInit()
        # (Line 52) fx.playerBlockInit();
        fx.f_playerBlockInit()
        # (Line 53) foreach(cp : EUDLoopPlayer("Human")) {
        for cp in EUDLoopPlayer("Human"):
            # (Line 54) setcurpl(cp);
            f_setcurpl(cp)
            # (Line 55) CenterView("PlayerRevive");
            # (Line 56) }
            DoActions(CenterView("PlayerRevive"))
            # (Line 57) }

        # (Line 58) }
    EUDEndIf()
