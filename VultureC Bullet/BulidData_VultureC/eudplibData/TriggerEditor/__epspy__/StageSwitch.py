## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import functions as fx;
import functions as fx
# (Line 2) import opening as op;
import opening as op
# (Line 3) import boss1 as b1;
import boss1 as b1
# (Line 4) import boss2 as b2;
import boss2 as b2
# (Line 5) import boss3 as b3;
import boss3 as b3
# (Line 6) import boss4 as b4;
import boss4 as b4
# (Line 7) import boss5 as b5;
import boss5 as b5
# (Line 8) import boss6 as b6;
import boss6 as b6
# (Line 9) import boss7 as b7;
import boss7 as b7
# (Line 11) const s = StringBuffer(1024);
s = _CGFW(lambda: [StringBuffer(1024)], 1)[0]
# (Line 13) function stage() {
@EUDFunc
def f_stage():
    # (Line 14) switch(fx.cur_Stage()) {
    EUDSwitch(fx.f_cur_Stage())
    # (Line 15) case 0:
    _t1 = EUDSwitchCase()
    # (Line 16) op.select();
    if _t1(0):
        op.f_select()
        # (Line 17) break;
        EUDBreak()
        # (Line 18) case 1:
    _t2 = EUDSwitchCase()
    # (Line 19) b1.stage1();
    if _t2(1):
        b1.f_stage1()
        # (Line 20) break;
        EUDBreak()
        # (Line 21) case 2:
    _t3 = EUDSwitchCase()
    # (Line 22) b2.stage2();
    if _t3(2):
        b2.f_stage2()
        # (Line 23) break;
        EUDBreak()
        # (Line 24) case 3:
    _t4 = EUDSwitchCase()
    # (Line 25) b3.stage3();
    if _t4(3):
        b3.f_stage3()
        # (Line 26) break;
        EUDBreak()
        # (Line 27) case 4:
    _t5 = EUDSwitchCase()
    # (Line 28) b4.stage4();
    if _t5(4):
        b4.f_stage4()
        # (Line 29) break;
        EUDBreak()
        # (Line 30) case 5:
    _t6 = EUDSwitchCase()
    # (Line 31) b5.stage5();
    if _t6(5):
        b5.f_stage5()
        # (Line 32) break;
        EUDBreak()
        # (Line 33) case 6:
    _t7 = EUDSwitchCase()
    # (Line 34) b6.stage6();
    if _t7(6):
        b6.f_stage6()
        # (Line 35) break;
        EUDBreak()
        # (Line 36) case 7:
    _t8 = EUDSwitchCase()
    # (Line 37) b7.stage7();
    if _t8(7):
        b7.f_stage7()
        # (Line 38) default:
    # (Line 39) break;
    if EUDSwitchDefault()():
        EUDBreak()
        # (Line 40) }
    # (Line 41) }
    EUDEndSwitch()
