## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v.makeL() if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import functions as fx;
import functions as fx
# (Line 3) var bossLoc = $L("Boss");
bossLoc = EUDCreateVariables(1)
_IGVA([bossLoc], lambda: [GetLocationIndex("Boss")])
# (Line 4) var boss4EPD;
boss4EPD = EUDVariable()
# (Line 5) var boss4Face;
boss4Face = EUDVariable()
# (Line 6) var boss4AttkCycle;
boss4AttkCycle = EUDVariable()
# (Line 7) var bulletTime = 0;
bulletTime = EUDCreateVariables(1)
_IGVA([bulletTime], lambda: [0])
# (Line 8) var bulletDir = 0;
bulletDir = EUDCreateVariables(1)
_IGVA([bulletDir], lambda: [0])
# (Line 9) var bulletRotDir = 0;
bulletRotDir = EUDCreateVariables(1)
_IGVA([bulletRotDir], lambda: [0])
# (Line 10) const bulletRot = [2, 250];
bulletRot = _CGFW(lambda: [_ARR(FlattenList([2, 250]))], 1)[0]
# (Line 12) const s = StringBuffer(1024);
s = _CGFW(lambda: [StringBuffer(1024)], 1)[0]
# (Line 14) function stage4() {
@EUDFunc
def f_stage4():
    # (Line 15) boss4Face = bread_epd(boss4EPD + 0x21/4, 1);
    boss4Face << (f_bread_epd(boss4EPD + 0x21 // 4, 1))
    # (Line 16) boss4AttkCycle = bread_epd(boss4EPD + 0x55/4, 1);
    boss4AttkCycle << (f_bread_epd(boss4EPD + 0x55 // 4, 1))
    # (Line 18) once {
    if EUDExecuteOnce()():
        # (Line 19) wwrite(0x6C9858 + 2752 + 163 * 2, 369);
        f_wwrite(0x6C9858 + 2752 + 163 * 2, 369)
        # (Line 20) dwwrite(0x6C9858 + 1696 + 163 * 4, 1700);
        f_dwwrite(0x6C9858 + 1696 + 163 * 4, 1700)
        # (Line 21) fx.setBulletDam(3, 15);
        fx.f_setBulletDam(3, 15)
        # (Line 22) }
        # (Line 24) if(fx.cur_bSwitch() == 0) { //보스 소환
    EUDEndExecuteOnce()
    if EUDIf()(fx.f_cur_bSwitch() == 0):
        # (Line 25) boss4EPD = fx.SetNextUnitEPD();
        boss4EPD << (fx.SetNextUnitEPD())
        # (Line 26) CreateUnit(1, 58, bossLoc, 6);
        # (Line 27) fx.set_bSwitch(1);
        DoActions(CreateUnit(1, 58, bossLoc, 6))
        fx.f_set_bSwitch(1)
        # (Line 28) foreach(cp : EUDLoopPlayer("Human")) {
        for cp in EUDLoopPlayer("Human"):
            # (Line 29) setcurpl(cp);
            f_setcurpl(cp)
            # (Line 30) s.printAt(0, "\n\n\n\n\n\n\n\n\n");
            s.printAt(0, "\n\n\n\n\n\n\n\n\n")
            # (Line 31) s.printAt(2, "\x13\x1E━━━\x02━━━\x04━━ \x1F[ \x08위   험 \x1F]\x04 ━━\x02━━━\x1E━━━\n\n\x13\x07[\x04 Stage \x114 \x07]\n\n\x13\x04나선 \x03발키리\n\n\x13\x1E━━━\x02━━━━\x04━━━━━━━\x02━━━━\x1E━━━━");
            s.printAt(2, "\x13\x1E━━━\x02━━━\x04━━ \x1F[ \x08위   험 \x1F]\x04 ━━\x02━━━\x1E━━━\n\n\x13\x07[\x04 Stage \x114 \x07]\n\n\x13\x04나선 \x03발키리\n\n\x13\x1E━━━\x02━━━━\x04━━━━━━━\x02━━━━\x1E━━━━")
            # (Line 32) }
            # (Line 33) }

        # (Line 35) fx.playerRevive(); //플레이어 소환
    EUDEndIf()
    fx.f_playerRevive()
    # (Line 37) fx.printBossHP(boss4EPD);
    fx.f_printBossHP(boss4EPD)
    # (Line 39) bulletTime++;
    bulletTime.__iadd__(1)
    # (Line 40) if(bulletTime % 288 > 216) {
    if EUDIf()(bulletTime % 288 <= 216, neg=True):
        # (Line 41) bulletRotDir = 1;
        bulletRotDir << (1)
        # (Line 42) }
        # (Line 43) if(bulletTime % 288 == 0) {
    EUDEndIf()
    if EUDIf()(bulletTime % 288 == 0):
        # (Line 44) bulletRotDir = 0;
        bulletRotDir << (0)
        # (Line 45) }
        # (Line 47) if(fx.bulletTimer(40) == True) { //중앙 미사일
    EUDEndIf()
    if EUDIf()(fx.f_bulletTimer(40) == True):
        # (Line 48) CreateUnit(9, 194, bossLoc, 7);
        # (Line 49) setcurpl(7);
        DoActions(CreateUnit(9, 194, bossLoc, 7))
        f_setcurpl(7)
        # (Line 50) RunAIScriptAt("JYDg", bossLoc);
        # (Line 51) }
        DoActions(RunAIScriptAt("JYDg", bossLoc))
        # (Line 53) if(fx.bulletTimer(6) == True) { //보스 패턴
    EUDEndIf()
    if EUDIf()(fx.f_bulletTimer(6) == True):
        # (Line 54) var currentMissile;
        currentMissile = EUDVariable()
        # (Line 55) for(var i = 0; i < 4; i++) {
        i = EUDVariable()
        i << (0)
        if EUDWhile()(i >= 4, neg=True):
            def _t7():
                i.__iadd__(1)
            # (Line 56) currentMissile = fx.SetNextUnitEPD();
            currentMissile << (fx.SetNextUnitEPD())
            # (Line 57) CreateUnit(1, 197, bossLoc, 6);
            # (Line 58) fx.SetMissileDir(currentMissile, (i * 64 + bulletDir) % 256);
            DoActions(CreateUnit(1, 197, bossLoc, 6))
            fx.SetMissileDir(currentMissile, (i * 64 + bulletDir) % 256)
            # (Line 59) }
            # (Line 60) Order(197, 6, "Anywhere", Move, "PlayerRevive");
            EUDSetContinuePoint()
            _t7()
        EUDEndWhile()
        # (Line 61) bulletDir += bulletRot[bulletRotDir];
        DoActions(Order(197, 6, "Anywhere", Move, "PlayerRevive"))
        bulletDir.__iadd__(bulletRot[bulletRotDir])
        # (Line 62) }
        # (Line 64) if(boss4AttkCycle == 119) { //보스 기본 공격
    EUDEndIf()
    if EUDIf()(boss4AttkCycle == 119):
        # (Line 65) var currentMissile;
        currentMissile = EUDVariable()
        # (Line 66) var boss4TargetEPD = EPD(dwread_epd(boss4EPD + 0x5C/4));
        boss4TargetEPD = EUDVariable()
        boss4TargetEPD << (EPD(f_dwread_epd(boss4EPD + 0x5C // 4)))
        # (Line 67) var boss4TargetPlayer = bread_epd(boss4TargetEPD + 0x4C/4, 0);
        boss4TargetPlayer = EUDVariable()
        boss4TargetPlayer << (f_bread_epd(boss4TargetEPD + 0x4C // 4, 0))
        # (Line 68) currentMissile = fx.SetNextUnitEPD();
        currentMissile << (fx.SetNextUnitEPD())
        # (Line 69) CreateUnit(1, 195, bossLoc, 6);
        # (Line 70) MoveLocation("BossTarget", 19, boss4TargetPlayer, "Anywhere");
        DoActions(CreateUnit(1, 195, bossLoc, 6))
        # (Line 71) Order(195, 6, bossLoc, Move, "BossTarget");
        DoActions(MoveLocation("BossTarget", 19, boss4TargetPlayer, "Anywhere"))
        # (Line 72) }
        DoActions(Order(195, 6, bossLoc, Move, "BossTarget"))
        # (Line 74) if(Bring(6, Exactly, 1, 195, "BossTarget") && boss4AttkCycle == 72) {
    EUDEndIf()
    if EUDIf()(EUDSCAnd()(Bring(6, Exactly, 1, 195, "BossTarget"))(boss4AttkCycle == 72)()):
        # (Line 75) KillUnitAt(1, 195, "BossTarget", 6);
        # (Line 76) CreateUnit(7, 194, "BossTarget", 6);
        DoActions(KillUnitAt(1, 195, "BossTarget", 6))
        # (Line 77) setcurpl(6);
        DoActions(CreateUnit(7, 194, "BossTarget", 6))
        f_setcurpl(6)
        # (Line 78) RunAIScriptAt("JYDg", "BossTarget");
        # (Line 79) }
        DoActions(RunAIScriptAt("JYDg", "BossTarget"))
        # (Line 81) if(Deaths(6, Exactly, 1, 58)) {
    EUDEndIf()
    if EUDIf()(Deaths(6, Exactly, 1, 58)):
        # (Line 82) KillUnit(19, Force1);
        # (Line 83) fx.set_bSwitch(0);
        DoActions(KillUnit(19, Force1))
        fx.f_set_bSwitch(0)
        # (Line 84) fx.set_pSwitch(0);
        fx.f_set_pSwitch(0)
        # (Line 85) fx.set_Stage(5);
        fx.f_set_Stage(5)
        # (Line 86) fx.bulletInit();
        fx.f_bulletInit()
        # (Line 87) fx.playerBlockInit();
        fx.f_playerBlockInit()
        # (Line 88) foreach(cp : EUDLoopPlayer("Human")) {
        for cp in EUDLoopPlayer("Human"):
            # (Line 89) setcurpl(cp);
            f_setcurpl(cp)
            # (Line 90) CenterView("PlayerRevive");
            # (Line 91) }
            DoActions(CenterView("PlayerRevive"))
            # (Line 92) }

        # (Line 93) }
    EUDEndIf()
